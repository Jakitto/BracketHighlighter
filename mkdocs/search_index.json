{
    "docs": [
        {
            "location": "/", 
            "text": "BracketHighlighter\n\n\nA bracket matcher and highlighter for Sublime.\n\n\n\n\nOverview\n\n\nBracket Highlighter matches a variety of brackets such as: \n[]\n, \n()\n, \n{}\n, \n, \n''\n, \ntag\n/tag\n, and even custom brackets.\n\n\nThis was originally forked from pyparadigm\ns \nSublimeBrackets\n and \nSublimeTagmatcher\n (both are no longer available).  I forked this to fix some issues I had and to add some features I had wanted.  I also wanted to improve the efficiency of the matching.\n\n\nMoving forward, I have thrown away all of the code and have completely rewritten the entire code base to allow for a more flexibility, faster, and more feature rich experience.\n\n\n\n\nFeature List\n\n\n\n\nCustomizable to highlight almost any bracket.\n\n\nCustomizable bracket highlight style.\n\n\nHigh visibility bracket highlight mode.\n\n\nSelectively disable or enable specific matching of tags, brackets, or quotes.\n\n\nSelectively whitelist or blacklist matching of specific tags, brackets, or quotes based on language.\n\n\nWhen bound to a shortcut, allow option to show line count and char count between match in the status bar.\n\n\nHighlight basic brackets within strings.\n\n\nWorks with multi-select.\n\n\nConfigurable custom gutter icons.\n\n\nToggle bracket escape mode for string brackets (regex|string).\n\n\nBracket plugins that can jump between bracket ends, select content, remove brackets and/or content, wrap selections with brackets, swap brackets, swap quotes (handling quote escaping between the main quotes), fold/unfold content between brackets, toggle through tag attribute selection, select both the opening and closing tag name to change both simultaneously.\n\n\n\n\nCredits\n\n\n\n\npyparadigm: for his original efforts with SublimeBrackets and SublimeTagmatcher which originally BracketHighlighter was built off of and the inspiration for this project.\n\n\nBoundInCode: for his Tag icon.", 
            "title": "About BracketHighlighter"
        }, 
        {
            "location": "/#brackethighlighter", 
            "text": "A bracket matcher and highlighter for Sublime.", 
            "title": "BracketHighlighter"
        }, 
        {
            "location": "/#overview", 
            "text": "Bracket Highlighter matches a variety of brackets such as:  [] ,  () ,  {} ,  ,  '' ,  tag /tag , and even custom brackets.  This was originally forked from pyparadigm s  SublimeBrackets  and  SublimeTagmatcher  (both are no longer available).  I forked this to fix some issues I had and to add some features I had wanted.  I also wanted to improve the efficiency of the matching.  Moving forward, I have thrown away all of the code and have completely rewritten the entire code base to allow for a more flexibility, faster, and more feature rich experience.", 
            "title": "Overview"
        }, 
        {
            "location": "/#feature-list", 
            "text": "Customizable to highlight almost any bracket.  Customizable bracket highlight style.  High visibility bracket highlight mode.  Selectively disable or enable specific matching of tags, brackets, or quotes.  Selectively whitelist or blacklist matching of specific tags, brackets, or quotes based on language.  When bound to a shortcut, allow option to show line count and char count between match in the status bar.  Highlight basic brackets within strings.  Works with multi-select.  Configurable custom gutter icons.  Toggle bracket escape mode for string brackets (regex|string).  Bracket plugins that can jump between bracket ends, select content, remove brackets and/or content, wrap selections with brackets, swap brackets, swap quotes (handling quote escaping between the main quotes), fold/unfold content between brackets, toggle through tag attribute selection, select both the opening and closing tag name to change both simultaneously.", 
            "title": "Feature List"
        }, 
        {
            "location": "/#credits", 
            "text": "pyparadigm: for his original efforts with SublimeBrackets and SublimeTagmatcher which originally BracketHighlighter was built off of and the inspiration for this project.  BoundInCode: for his Tag icon.", 
            "title": "Credits"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling BracketHighlighter.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install BracketHighlighter is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nBracketHighlighter\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install BracketHighlighter for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/BracketHighlighter.git BracketHighlighter\n\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing BracketHighlighter.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install BracketHighlighter is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  BracketHighlighter ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install BracketHighlighter for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/BracketHighlighter.git BracketHighlighter    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "Basic Usage\n\n\nHow to use BracketHighlighter.\n\n\n\n\nGeneral Use\n\n\nIn general, BracketHighlighter (\nBH\n) will highlight brackets (or defined brackets like start and end blocks) surrounding the cursor.  By default, \nBH\n will put opening and closing icons in the gutter of the corresponding line containing open or closing bracket.\n\n\nIf you are using Sublime Text build 3116+, a new feature has been added which shows a popup when you mouse over a bracket that has its matching bracket pair off screen.  It will show where the other bracket is located with line context and and provide a link to jump to the other bracket.  When mousing over a bracket in which the match could not be found, a popup explaining why this might be will show up giving you the option to click a link which will perform a search without thresholds to see if it can find the brackets when restraints are removed.\n\n\nBuilt-in Supported brackets\n\n\nBH\n supports a variety of brackets out of the box; here are some examples:\n\n\n\n\nround\n\n\nsquare\n\n\ncurly\n\n\nangle\n\n\nsingle and double quotes\n\n\nPython single, double, and triple quotes (Unicode and raw)\n\n\nDjango Python templates with mixed HTML, CSS, and JS\n\n\nJavaScript regex\n\n\nPerl regex\n\n\nRuby regex\n\n\nMarkdown bold, italic, and code blocks\n\n\nCSSedit groups\n\n\nRuby conditional statements\n\n\nC/C++ compiler switches\n\n\nPHP conditional keywords\n\n\nPHP angle brackets \n?php ?\n\n\nErlang conditional statements\n\n\nHTML, ColdFusion, XML, and various other template tags\n\n\nBash conditional and looping constructs\n\n\nFish conditional and looping constructs\n\n\nLua\n\n\nPascal\n\n\nElixir\n\n\n\n\nWithin supported regex and strings, \nBH\n can also highlight basic sub brackets between the matched quotes: \n(), [], {}\n.\n\n\nGeneral Commands\n\n\nBH\n has a couple of additional features built-in which are found in the command palette.\n\n\nToggle Global Enable\n\n\nThe \nbh_toggle_enable\n command enables and disables \nBH\n globally.\n\n\nToggle String Bracket Escape Mode\n\n\nbh_toggle_string_escape_mode\n toggles \nBH\ns recognition mode of escaped sub brackets in strings and regex.  The modes are \nstring escape\n mode and \nregex escape\n mode.\n\n\nFind Matching Offscreen Bracket\n\n\nWhen the setting \nshow_offscreen_bracket_popup\n is enabled, the \nbh_offscreen_popup\n command shows a popup on the screen showing the location of the matching offscreen bracket(s) (only available for Sublime Text 3 versions that support this).  Cursor needs to be between a matching pair of brackets.  The popup will also auto popup when the mouse hovers over an onscreen bracket when the other matching bracket is offscreen.\n\n\nBracket Plugin Commands\n\n\nBH\n is also extendable via plugins and provides a number of built in Bracket Plugins that take advantage of \nBH\ns matching to provide additional features.  Most plugin features are available via the \nTools-\nPackages-\nBracketHighlighter\n menu or the command palette.  To see how to configure shortcuts, see the \nExample.sublime-settings\n file.\n\n\nBracket Select Plugin\n\n\nSelects the content between the brackets or moves the selection to the opening or closing bracket.  Behavior is slightly modified for tags.\n\n\nSwap Brackets Plugin\n\n\nAllows the swapping of the current brackets to another type of bracket.  When selected, it will displayed the bracket options that allowed for the current language.  Allowed brackets are defined in \nbh_swapping.sublime-settings\n.\n\n\nWrap Brackets Plugin\n\n\nAllows the wrapping of selected text with a bracket pair.  When selected, it will display the bracket options that are allowed for the current language.  Allowed brackets are defined in \nbh_wrapping.sublime-settings\n.\n\n\nBracket Remove Plugin\n\n\nRemoves the surrounding brackets.\n\n\nFold Bracket Plugin\n\n\nFolds the content of the current surrounding brackets.\n\n\nSwap Quotes Plugin\n\n\nSwaps the quote style of surrounding quotes from double to single or vice versa.  It also handles escaping and un-escaping of sub quotes.\n\n\nTag Plugin\n\n\nProvides extra logic to target and highlight XML/HTML tags.  To use BracketHighlighter\ns built-in HTML highlighting in your HTML-like template language of choice, add it to the list in \nbh_tag.sublime_settings\n.\n\n\nTag Attribute Select Plugin\n\n\nCycles through selecting tag attributes.\n\n\nTag Name Select Plugin\n\n\nSelects the opening and closing tag name of current tag.\n\n\nBracket Swapping Plugin\n\n\nSwaps the current surrounding bracket with different supported brackets of your choice.  Swapping definitions are configured in \nbh_swapping.sublime-settings\n.\n\n\nShortcuts\n\n\nBH\n provides no shortcuts in order to avoid shortcut conflicts, but you can view the included \nExample.sublime-keymaps\n file to get an idea how to set up your own.\n\n\nSuggested User Settings\n\n\nmatch_brackets\n:\n \nfalse\n \n// disable default ST bracket highlighting", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/usage/#basic-usage", 
            "text": "How to use BracketHighlighter.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/usage/#general-use", 
            "text": "In general, BracketHighlighter ( BH ) will highlight brackets (or defined brackets like start and end blocks) surrounding the cursor.  By default,  BH  will put opening and closing icons in the gutter of the corresponding line containing open or closing bracket.  If you are using Sublime Text build 3116+, a new feature has been added which shows a popup when you mouse over a bracket that has its matching bracket pair off screen.  It will show where the other bracket is located with line context and and provide a link to jump to the other bracket.  When mousing over a bracket in which the match could not be found, a popup explaining why this might be will show up giving you the option to click a link which will perform a search without thresholds to see if it can find the brackets when restraints are removed.", 
            "title": "General Use"
        }, 
        {
            "location": "/usage/#built-in-supported-brackets", 
            "text": "BH  supports a variety of brackets out of the box; here are some examples:   round  square  curly  angle  single and double quotes  Python single, double, and triple quotes (Unicode and raw)  Django Python templates with mixed HTML, CSS, and JS  JavaScript regex  Perl regex  Ruby regex  Markdown bold, italic, and code blocks  CSSedit groups  Ruby conditional statements  C/C++ compiler switches  PHP conditional keywords  PHP angle brackets  ?php ?  Erlang conditional statements  HTML, ColdFusion, XML, and various other template tags  Bash conditional and looping constructs  Fish conditional and looping constructs  Lua  Pascal  Elixir   Within supported regex and strings,  BH  can also highlight basic sub brackets between the matched quotes:  (), [], {} .", 
            "title": "Built-in Supported brackets"
        }, 
        {
            "location": "/usage/#general-commands", 
            "text": "BH  has a couple of additional features built-in which are found in the command palette.", 
            "title": "General Commands"
        }, 
        {
            "location": "/usage/#toggle-global-enable", 
            "text": "The  bh_toggle_enable  command enables and disables  BH  globally.", 
            "title": "Toggle Global Enable"
        }, 
        {
            "location": "/usage/#toggle-string-bracket-escape-mode", 
            "text": "bh_toggle_string_escape_mode  toggles  BH s recognition mode of escaped sub brackets in strings and regex.  The modes are  string escape  mode and  regex escape  mode.", 
            "title": "Toggle String Bracket Escape Mode"
        }, 
        {
            "location": "/usage/#find-matching-offscreen-bracket", 
            "text": "When the setting  show_offscreen_bracket_popup  is enabled, the  bh_offscreen_popup  command shows a popup on the screen showing the location of the matching offscreen bracket(s) (only available for Sublime Text 3 versions that support this).  Cursor needs to be between a matching pair of brackets.  The popup will also auto popup when the mouse hovers over an onscreen bracket when the other matching bracket is offscreen.", 
            "title": "Find Matching Offscreen Bracket"
        }, 
        {
            "location": "/usage/#bracket-plugin-commands", 
            "text": "BH  is also extendable via plugins and provides a number of built in Bracket Plugins that take advantage of  BH s matching to provide additional features.  Most plugin features are available via the  Tools- Packages- BracketHighlighter  menu or the command palette.  To see how to configure shortcuts, see the  Example.sublime-settings  file.", 
            "title": "Bracket Plugin Commands"
        }, 
        {
            "location": "/usage/#bracket-select-plugin", 
            "text": "Selects the content between the brackets or moves the selection to the opening or closing bracket.  Behavior is slightly modified for tags.", 
            "title": "Bracket Select Plugin"
        }, 
        {
            "location": "/usage/#swap-brackets-plugin", 
            "text": "Allows the swapping of the current brackets to another type of bracket.  When selected, it will displayed the bracket options that allowed for the current language.  Allowed brackets are defined in  bh_swapping.sublime-settings .", 
            "title": "Swap Brackets Plugin"
        }, 
        {
            "location": "/usage/#wrap-brackets-plugin", 
            "text": "Allows the wrapping of selected text with a bracket pair.  When selected, it will display the bracket options that are allowed for the current language.  Allowed brackets are defined in  bh_wrapping.sublime-settings .", 
            "title": "Wrap Brackets Plugin"
        }, 
        {
            "location": "/usage/#bracket-remove-plugin", 
            "text": "Removes the surrounding brackets.", 
            "title": "Bracket Remove Plugin"
        }, 
        {
            "location": "/usage/#fold-bracket-plugin", 
            "text": "Folds the content of the current surrounding brackets.", 
            "title": "Fold Bracket Plugin"
        }, 
        {
            "location": "/usage/#swap-quotes-plugin", 
            "text": "Swaps the quote style of surrounding quotes from double to single or vice versa.  It also handles escaping and un-escaping of sub quotes.", 
            "title": "Swap Quotes Plugin"
        }, 
        {
            "location": "/usage/#tag-plugin", 
            "text": "Provides extra logic to target and highlight XML/HTML tags.  To use BracketHighlighter s built-in HTML highlighting in your HTML-like template language of choice, add it to the list in  bh_tag.sublime_settings .", 
            "title": "Tag Plugin"
        }, 
        {
            "location": "/usage/#tag-attribute-select-plugin", 
            "text": "Cycles through selecting tag attributes.", 
            "title": "Tag Attribute Select Plugin"
        }, 
        {
            "location": "/usage/#tag-name-select-plugin", 
            "text": "Selects the opening and closing tag name of current tag.", 
            "title": "Tag Name Select Plugin"
        }, 
        {
            "location": "/usage/#bracket-swapping-plugin", 
            "text": "Swaps the current surrounding bracket with different supported brackets of your choice.  Swapping definitions are configured in  bh_swapping.sublime-settings .", 
            "title": "Bracket Swapping Plugin"
        }, 
        {
            "location": "/usage/#shortcuts", 
            "text": "BH  provides no shortcuts in order to avoid shortcut conflicts, but you can view the included  Example.sublime-keymaps  file to get an idea how to set up your own.", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/usage/#suggested-user-settings", 
            "text": "match_brackets :   false   // disable default ST bracket highlighting", 
            "title": "Suggested User Settings"
        }, 
        {
            "location": "/customize/", 
            "text": "Customization\n\n\nTweaking BracketHighlighter.\n\n\n\n\nOverview\n\n\nBH\n is extremely flexible and can be customized and extended to fit a user\ns needs.  The first step to customizing the existing rules and settings is to create a \nbh_core.sublime-settings\n in your \nUser\n folder.  This is where the bracket and style rules and settings live.  By changing these settings, you can add support for new languages, or change the look of highlighting, and much more.\n\n\nCore Settings\n\n\nStyles and colors will be discussed in greater depth in the \nConfiguring Highlight Style\n section.  But there are a number of general setting you can adjust to change how things look or work.  These settings are found in \nbh_core.sublime-settings\n.\n\n\nVisual Settings\n\n\nThese are the settings related to the visual appearance of \nBH\n.\n\n\nshow_in_minimap\n\n\nShows highlighted brackets in the minimap.  This will work with all highlight styles except \nunderline\n; \nthin_underline\n has no issues.\n\n\n    \n// Show brackets in the minimap.\n\n    \nshow_in_minimap\n:\n \nfalse\n,\n\n\n\n\n\n\nshow_unmatched\n\n\nDisplays a special highlight for brackets that cannot be matched.\n\n\n    \n// When only either the left or right bracket can be found\n\n    \n// this defines if the unmatched bracket should be shown.\n\n    \nshow_unmatched\n:\n \ntrue\n,\n\n\n\n\n\n\nshow_unmatched_exceptions\n\n\nList of languages in which the \nshow_unmatched\n option logic will be reversed.\n\n\n    \n// Do the opposite of \nshow_unmatched\n for the languages listed below\n\n    \nshow_unmatched_exceptions\n:\n \n[],\n\n\n\n\n\n\ncontent_highlight_bar\n\n\nAn experimental setting which can enable the display of a vertical bar that extends from the line containing the opening bracket to the line with the closing bracket.  Takes a boolean \ntrue\n or \nfalse\n.  When \nalign_content_highlight_bar\n is set to \nfalse\n, the bar will be shown on the first column regardless of indent level of the brackets.  When \nalign_content_highlight_bar\n is set to \ntrue\n, the bar will be aligned at the bracket indent level.\n\n\n    \n// Experimental: Creates a visible bar at the beginning of all lines between\n\n    \n// multiline bracket spans.\n\n    \ncontent_highlight_bar\n:\n \nfalse\n,\n\n\n\n\n\n\nshow_in_widgets\n\n\nAn experimental setting that enables bracket highlighting in widgets (panels etc.).  By default, \nBH\n does not highlight any brackets in plain text which is what the majority of the widget text boxes are.  Regex search boxes are not plain text and should get bracket highlighting.\n\n\n    \n// Experimental: Allow bracket highlighter to search in widgets.\n\n    \n// Most widgets use Plain Text which BH should ignore,\n\n    \n// But regex find views views are usually regular expression\n\n    \n// Which should be the only views to trigger BH.\n\n    \nsearch_in_widgets\n:\n \nfalse\n,\n\n\n\n\n\n\nOutput panels are widgets as well, but sometimes the widget flag gets removed from them (Sublime issue). So this flag may or may not affect the output panel depending on its state.  If you are a developer and wish to ensure an output panel that is created by your plugin does \nnot\n have bracket highlighting, you can set the following setting to the view as \nTrue\n: \nbracket_highlighter.ignore\n.\n\n\nalign_content_highlight_bar\n\n\nModifies the behavior of \ncontent_highlight_bar\n and draws the vertical content bar at the indentation level of the highlighted bracket, but there are some limitations:\n\n\n\n\n\n\nThe content bar cannot extend through an empty line unless the bar is on the first column.  This is a limitation of the Sublime API.  Empty lines will have cause a gap in the bar.\n\n\n\n\n\n\nThe content bar will not be shown on a line where non-whitespace characters cross the bar.\n\n\n\n\n\n\n    \n// Experimental: Align the content highlight bar at the bracket indent level\n\n    \nalign_content_highlight_bar\n:\n \nfalse\n,\n\n\n\n\n\n\nhigh_visibility_enabled_by_default\n\n\nEnables high visibility mode by default.  High visibility mode highlights not only the bracket but the content between as well, but it is disabled by default and must be toggled on to be used.  This reverses the behavior and has it on by default. Takes a boolean \ntrue\n or \nfalse\n.\n\n\n    \n// Enable high visibility by default when sublime starts up\n\n    \nhigh_visibility_enabled_by_default\n:\n \nfalse\n,\n\n\n\n\n\n\nhigh_visibility_style\n\n\nModifies the styling of high visibility mode.  The available options are \nsolid\n, \noutline\n, \nunderline\n, \nthin_underline\n, \nsquiggly\n, and \nstippled\n.\n\n\n    \n// High visibility style and color for high visibility mode\n\n    \nhigh_visibility_style\n:\n \noutline\n,\n\n\n\n\n\n\nhigh_visibility_color\n\n\nModifies the high visibility color.  There are three types of settings you can use:\n\n\n\n\n\n\n__default__\n is a special reserved value which will use the color set in \nbracket_styles\n.  See \nConfiguring Highlight Style\n for more info.\n\n\n\n\n\n\n__bracket__\n is a special reserved value which will inherit the defined color of the highlighted bracket.\n\n\n\n\n\n\nAny valid scope found in your color scheme.\n\n\n\n\n\n\n    \n// Color for high visibility mode\n\n    \nhigh_visibility_color\n:\n \n__bracket__\n,\n\n\n\n\n\n\nBehavioral Settings\n\n\nThese settings affect the matching behavior.\n\n\nmatch_only_adjacent\n\n\nCauses \nBH\n to only match and highlight brackets when the cursor is adjacent to a bracket.\n\n\n    \n// Match brackets only when the cursor is touching the inside of the bracket\n\n    \nmatch_only_adjacent\n:\n \nfalse\n,\n\n\n\n\n\n\nbracket_outside_adjacent\n\n\nAugments the matching behavior and will trigger matching when the cursor is adjacent to a cursor on the outside (not between the brackets).\n\n\n    \n// Outside adjacent bracket matching\n\n    \nbracket_outside_adjacent\n:\n \ntrue\n,\n\n\n\n\n\n\nblock_cursor_mode\n\n\nExperimental setting that modifies the bracket matching mode for block cursor.  The bracket matching mode is one that makes a little more sense to some people in regards to the visual representation of block cursors.  So if you are someone that uses block cursors and find that toggling \nbracket_outside_adjacent\n still doesn\nt quite match brackets how you would like, you can give this setting a try.\n\n\nWhen this setting is enabled, \nbracket_outside_adjacent\n will be ignored.\n\n\n    \n// Experimental: Special matching mode for block cursor.\n\n    \n// Essentially, this provides a matching mode that makes a little more\n\n    \n// sense to some in regards to the visual representation of block cursors.\n\n    \n// This will ignore \nbracket_outside_adjacent\n.\n\n    \nblock_cursor_mode\n:\n \nfalse\n,\n\n\n\n\n\n\nignore_outside_adjacent_in_plugin\n\n\nIgnores the \nbracket_outside_adjacent\n setting when running a plugin \nif\n the plugin sets \nno_outside_adj\n to \nnull\n (\nnull\n for JSON or \nNone\n in Python).\n\n\n    \n// When \nbracket_outside_adjacet\n is set, and a plugin command explicitly sets\n\n    \n// \nno_outside_adj\n \nNone\n instead of \ntrue\n or the default \nfalse\n,\n\n    \n// this value will be used.\n\n    \nignore_outside_adjacent_in_plugin\n:\n \ntrue\n,\n\n\n\n\n\n\nignore_block_mode_in_plugin\n\n\nExperimental setting that ignores the \nblock_cursor_mode\n setting when running a plugin \nif\n the plugin sets \nno_block_mode\n to \nnull\n (\nnull\n for JSON or \nNone\n in Python).\n\n\n    \n// When \nblock_cursor_mode\n is set, and a plugin command explicitly sets\n\n    \n// \nno_block_mode\n to \nNone\n instead of \ntrue\n or the default \nfalse\n,\n\n    \n// this value will be used.\n\n    \nignore_block_mode_in_plugin\n:\n \ntrue\n,\n\n\n\n\n\n\nbracket_string_escape_mode\n\n\nDepending on the setting, \nBH\n will either match sub-brackets inside strings with traditional string escape logic, or will match sub-brackets in strings with regex escape logic.  Takes a string value of either \nregex\n or \nstring\n.\n\n\n    \n// Set mode for string escapes to ignore (regex|string)\n\n    \nbracket_string_escape_mode\n:\n \nstring\n,\n\n\n\n\n\n\nsearch_threshold\n\n\nSets the search threshold.  The search threshold determines how many characters \nBH\n will search through to find matching brackets before giving up.  This setting only affects auto-matching and not on-demand calls from the command palette and menu. By default, this value is very conservative and can be increased.  Keep in mind that a very large values may impact performance.\n\n\n    \n// Character threshold to search\n\n    \nsearch_threshold\n:\n \n5000\n,\n\n\n\n\n\n\nignore_threshold\n\n\nCauses \nsearch_threshold\ns\n limit to be ignored.  It is not advised to use this as very large files may cause a noticeable performance hit, but has been made available due to a number of requests.\n\n\n    \n// Ignore threshold\n\n    \nignore_threshold\n:\n \nfalse\n,\n\n\n\n\n\n\nauto_selection_threshold\n\n\nA numerical value which controls the maximum number of simultaneous auto-matched brackets that are allowed.  This setting will not be considered when running on-demand calls via the command palette or menu.\n\n\n    \n// Set max number of multi-select brackets that will be searched automatically\n\n    \nauto_selection_threshold\n \n:\n \n10\n,\n\n\n\n\n\n\nkill_highlight_on_threshold\n\n\nCompletely kills highlighting when \nauto_selection_threshold\n.  When disabled, \nBH\n will just highlight up to the threshold limit.\n\n\n    \n// Enable this to completely kill highlighting if \nauto_selection_threshold\n\n    \n// is exceeded.  Default is to highlight up to the \nauto_selection_threshold\n.\n\n    \nkill_highlight_on_threshold\n:\n \ntrue\n,\n\n\n\n\n\n\nno_multi_select_icons\n\n\nDisables gutter icons when doing multiple selections.\n\n\n    \n// Disable gutter icons when doing multi-select\n\n    \nno_multi_select_icons\n:\n \nfalse\n,\n\n\n\n\n\n\nPopup Settings\n\n\nSettings related to the new popup hints when brackets are off the viewable screen.\n\n\nshow_offscreen_bracket_popup\n\n\nSetting this will show a popup when the mouse hovers over a visible bracket and its matching pair is off screen.  The popup will show about 120 chars of context of every line shown.  Additionally, if the bracket off screen bracket is located on a separate line, it will show an additional line(s) of context before and after.  The context is shown in plain text, but the bracket will be emphasized by making the bracket bold and colorizing it with the your theme\ns keyword color.  \nChar context\n, \nline context\n, and \nemphasis color\n can all be configured in the settings file.\n\n\n\n\n\n\nIf a bracket was unmatched with the invalid highlight, you can mouse over it and will get the unmatched popup that explains the reasons why an unmatched bracket might occur.  It also offers the option to attempt matching without the threshold.\n\n\n\n\n    \n// Show hover popup\n\n    \n// This will show a hover popup when mousing over\n\n    \n// the visible bracket if the other\n\n    \n// highlighted matching bracket is off screen.\n\n    \n// It will show line text of the off screen bracket -/+ 128 chars\n\n    \n// from the bracket start and end points.\n\n    \n// A link will be available allowing the user to click and jump to\n\n    \n// the other bracket.\n\n    \nshow_offscreen_bracket_popup\n:\n \nfalse\n,\n\n\n\n\n\n\npopup_char_context\n\n\nThis determines the amount of chars per line of context that are allowed in the popup that is generated by \nshow_offscreen_bracket_popup\n.  By default, this setting is set to \n120\n.  If you desire a different amount, you can specify it here.\n\n\n    \n// Adjust char per line context of bracket popup.\n\n    \npopup_char_context\n:\n \n120\n,\n\n\n\n\n\n\npopup_line_context\n\n\nSetting that determines the amount of additional lines of context that are allowed in the popup that is generated by \nshow_offscreen_bracket_popup\n.  \npopup_line_context\n is only applied to brackets that are not on the same line as the visible bracket. This value is split and half the lines will be gathered from before the line of interest and half from after the line of interest.  It is recommend to use even numbers.  Line context is a bit dynamic in the sense that if x number of lines cannot be gathered from before, the additional lines will be applied after; the inverse is true in regards to lines after.\n\n\n    \n// Adjust number of lines of additional context\n\n    \n// that are shown when brackets are vertically off screen.\n\n    \n// Specified line count is split to context before and after the target line.\n\n    \n// So a value of 4 would give you two lines of context before and two lines after.\n\n    \npopup_line_context\n:\n \n2\n,\n\n\n\n\n\n\nuse_custom_popup_bracket_emphasis\n\n\nThis experimental setting allows you to override the default popup bracket emphasis which is calculated based on what scope/color you have assigned to the matched bracket style.  With this setting enabled, you can use the setting \npopup_bracket_emphasis\n to control the color of the popup bracket emphasis.  This will default to \ntrue\n if you don\nt have the mdpopups version which supports guessing the correct color.\n\n\n    \n// Use \npopup_bracket_emphasis\n to customize the popup\ns bracket emphasis color\n\n    \nuse_custom_popup_bracket_emphasis\n:\n \nfalse\n,\n\n\n\n\n\n\npopup_bracket_emphasis\n\n\nThis experimental setting dictates what color is used to emphasize the off screen bracket in the popup that is generated by \nshow_offscreen_bracket_popup\n.  Colors can either be specified by a standard \nTextMate scopes\n (the popup library being used is mdpopups, and it scans your theme for standard TextMate scopes and creates the necessary CSS for the popups), or you can specify a hex color in the form of \n#rgb\n or \n#rrggbb\n.  Due to limitations in Sublime\ns HTML renderer, scopes that define background colors will most likely not show the background color.  The default setting is \n#ff0000\n.\n\n\nOutside of the scopes generated by mdpoups, it is likely that your theme may have additionally included scopes.  Sublime seems to include these by default (but your mileage may vary):\n\n\n\n\nerror\n\n\ndeleted\n\n\nsuccess\n\n\ninserted\n\n\nwarning\n\n\nmodified\n\n\n\n\n    \n// Experimental: Specify the scope (to get color) to emphasize the off screen bracket\n\n    \n// in popups.  Alternatively you can use a hex value in the form \n#rgb\n or \n#rrggbb\n.\n\n    \npopup_bracket_emphasis\n:\n \nkeyword\n\n\n\n\n\n\nSpecial Settings\n\n\ndebug\n\n\nTurn on debug logging.  Set to \ntrue\n to enable or \nfalse\n to disable.\n\n\n    \n//Debug logging\n\n    \ndebug_enable\n:\n \nfalse\n,\n\n\n\n\n\n\nupgrade_dependencies\n\n\nThis sets whether \nBH\n will attempt to upgrade dependencies to the know latest on package upgrade.  If this is undesirable for any reason (development or you just don\nt like things upgrading without your explicit say so), then set this to \nfalse\n.\n\n\n    \n// Try to ensure dependencies are up to date.\n\n    \n// If it is not desirable to have this done (like developing) on a specific dependency,\n\n    \n// or some other reason, set this to False.\n\n    \nupgrade_dependencies\n:\n \ntrue\n,\n\n\n\n\n\n\nTag Plugin Settings\n\n\nTag settings found in \nbh_tag.sublime-settings\n.  All tag settings are dictionaries.  Each key is represents a tag mode such as: \nhtml\n, \nxhtml\n, \ncfml\n, etc.  All of these are exposed so that even non-standard HTML syntax can be supported.\n\n\n\n\nAttention!\n\n\nMore tag mode keys can be added, but they \nmust\n be added to \nevery\n setting with valid parameters.\n\n\n\n\ntag_mode\n\n\nA list that contains a dictionary of different modes.  Each mode tweaks the tag matching for the respective mode.  Each entry in the list consists of a dictionary with the keys \nmode\n, \nsyntax\n, and the optional \nfirst_line\n. \nmode\n specifies the mode name.  \nsyntax\n is a list of languages that are allowed in that mode. \nfirst_line\n (which is optional) is a regular expression that is applied to the first line in the file as a condition for selecting that mode.  The \ntag_mode\n list is evaluated in order from top to bottom and selects the first entry that matches all the criteria.\n\n\n    \n// Determine which style of tag-matching to use in which syntax.\n\n    \ntag_mode\n:\n \n[\n\n        \n{\nmode\n:\n \nxml\n,\n \nsyntax\n:\n \n[\nXML\n]},\n\n        \n{\n\n            \nmode\n:\n \nxhtml\n,\n\n            \nsyntax\n:\n \n[\n\n                \nHTML\n,\n\n                \nHTML 5\n,\n\n                \nPHP\n,\n\n                \nHTML (Jinja Templates)\n,\n\n                \nHTML (Rails)\n,\n\n                \nHTML (Twig)\n,\n\n                \nHTML (Django)\n,\n\n                \nlaravel-blade\n,\n\n                \nblade\n,\n\n                \nHandlebars\n,\n\n                \nAngularJS\n,\n\n                \nJava Server Pages (JSP)\n\n            \n],\n\n            \nfirst_line\n:\n \n^[ \\\\t]*\n\\\\?xml\n\n        \n},\n\n        \n{\n\n            \nmode\n:\n \nhtml\n,\n\n            \nsyntax\n:\n \n[\n\n                \nHTML\n,\n\n                \nHTML 5\n,\n\n                \nPHP\n,\n\n                \nHTML (Jinja Templates)\n,\n\n                \nHTML (Rails)\n,\n\n                \nHTML (Twig)\n,\n\n                \nHTML (Django)\n,\n\n                \nlaravel-blade\n,\n\n                \nblade\n,\n\n                \nHandlebars\n,\n\n                \nAngularJS\n,\n\n                \nJava Server Pages (JSP)\n\n            \n]\n\n        \n},\n\n        \n{\n\n            \nmode\n:\n \ncfml\n,\n\n            \nsyntax\n:\n \n[\nHTML+CFML\n,\n \nColdFusion\n,\n \nColdFusionCFC\n]\n\n        \n}\n\n    \n],\n\n\n\n\n\n\ntag_style\n\n\nSets the highlight style for the tag plugin.  The string value should correspond to a style entry in \nbracket_styles\n.  See \nConfiguring Highlight Style\n for more info.\n\n\n    \n// Style to use for matched tags\n\n    \ntag_style\n:\n \n{\n\n        \nxhtml\n:\n \ntag\n,\n\n        \nhtml\n:\n \ntag\n,\n\n        \ncfml\n:\n \ntag\n\n    \n},\n\n\n\n\n\n\ntag_scope_exclude\n\n\nExcludes certain scopes from being evaluated when searching for tags.\n\n\n    \n// Scopes to exclude from tag searches.\n\n    \ntag_scope_exclude\n:\n \n{\n\n        \nxhtml\n:\n \n[\nstring\n,\n \ncomment\n],\n\n        \nhtml\n:\n \n[\nstring\n,\n \ncomment\n],\n\n        \ncfml\n:\n \n[\nstring\n,\n \ncomment\n]\n\n    \n},\n\n\n\n\n\n\noptional_tag_patterns\n\n\nSpecifies a regex pattern for names that will be evaluated as optional tags. Optional tags whose closing tag is optional. In the case of optional tags, you may only have an opening (with no self closing slash). \nnull\n can be used to specify that there is no pattern for specified tag mode.\n\n\n    \n// Optional closing HTML tags. You can use \nnull\n if it does not require a pattern.\n\n    \noptional_tag_patterns\n:\n \n{\n\n        \nxml\n:\n \nnull\n,\n\n        \nxhtml\n:\n \nnull\n,\n\n        \nhtml\n:\n \ncolgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\n,\n\n        \ncfml\n:\n \ncf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\n\n    \n},\n\n\n\n\n\n\nvoid_tag_patterns\n\n\nSpecifies a regex pattern for names that never have a closing tag.  Void or empty tags can optionally use the self closing slash: \ntag /\n. \nnull\n can be used to specify that there is no pattern for specified tag mode.\n\n\n    \n// Tags that never have a closing.  You can use \nnull\n if it does not require a pattern.\n\n    \nvoid_tag_patterns\n:\n \n{\n\n        \nxml\n:\n \nnull\n,\n\n        \nxhtml\n:\n \nnull\n,\n\n        \nhtml\n:\n \narea|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\n,\n\n        \ncfml\n:\n \narea|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\n\n    \n},\n\n\n\n\n\n\nself_closing_tag_patterns\n\n\nSpecifies a regex pattern for tag names that can be represented in self closing form: \ntag /\n.  \nnull\n can be used to specify that there is no pattern for specified tag mode.\n\n\n    \n// Self closing tags.  Single tags that are closed like this \ntag /\n\n    \nself_closing_tag_patterns\n:\n \n{\n\n        \nxml\n:\n \n[\\\\w:\\\\.\\\\-]+\n,\n\n        \nxhtml\n:\n \n[\\\\w:\\\\.\\\\-]+\n,\n\n        \nhtml\n:\n \nnull\n,\n\n        \ncfml\n:\n \ncf.+\n\n    \n},\n\n\n\n\n\n\ntag_name\n\n\nSpecifies the regex pattern for identifying the tag name for a given tag mode.  This is broken out as a separate pattern so that the \ntagattrselect\n bh_plugin needs access to the tag_name and tag attributes separate form the whole HTML tag regex.\n\n\n    \n// Regex for tag name. Do not use capturing groups.\n\n    \ntag_name\n:\n\n    \n{\n\n        \nxhtml\n:\n \n[\\\\w:\\\\.\\\\-]+\n,\n\n        \nhtml\n:\n \n[\\\\w:\\\\.\\\\-]+\n,\n\n        \ncfml\n:\n \n[\\\\w:\\\\.\\\\-]+\n\n    \n},\n\n\n\n\n\n\nattributes\n\n\nSpecifies the regex pattern for identifying the tag attributes for a given tag mode.  This is broken out as a separate pattern so that the \ntagattrselect\n bh_plugin needs access to the tag_name and tag attributes separate from the whole HTML tag regex.\n\n\n    \n// HTML attributes.  Do not use capturing groups.\n\n    \nattributes\n:\n\n    \n{\n\n        \nxhtml\n:\n \n[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\n(?:\\\\.|[^\\\n])*\\\n|\n(?:\\\\.|[^\n])*\n))?\n,\n\n        \nhtml\n:\n \n[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\n[^\\\n]*\\\n|\n[^\n]*\n|[^\\\\s\\\n`=\n]+))?\n,\n\n        \ncfml\n:\n \n[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\n[^\\\n]*\\\n|\n[^\n]*\n|[^\\\\s\\\n`=\n]+))?\n\n    \n},\n\n\n\n\n\n\nstart_tag\n\n\nSpecifies the starting/opening tag regex.  The pattern can accept the tag name and attribute portion of the pattern from the \ntag_name\n and \nattributes\n settings via the python string formatting variables \ntag_name\n and \nattributes\n: see example below.  \ntag_name\n and \nattributes\n are broken out as a separate patterns so that the \ntagattrselect\n bh_plugin can have access to the tag_name and tag attributes separate from the whole HTML tag regex.\n\n\n    \n// Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator \n/\n only.\n\n    \n// Attributes and tag names are inserted using python string formatting:\n\n    \n// the keyword \nattributes\n and `tag_name` are used.\n\n    \nstart_tag\n:\n \n{\n\n        \nxhtml\n:\n \n(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)\n,\n\n        \nhtml\n:\n \n(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)\n,\n\n        \ncfml\n:\n \n(%(tag_name)s)(?:(?:\\\\s+%(attributes)s)*|(?:(?\n=cfif)|(?\n=cfelseif))[^\n]+)\\\\s*(/?)\n\n    \n},\n\n\n\n\n\n\nend_tag\n\n\nSpecifies the ending/closing tag regex.\n\n\n    \n// Regex for end/closing tag.  Only use a capturing group for name.\n\n    \nend_tag\n:\n \n{\n\n        \nxhtml\n:\n \n/([\\\\w\\\\:\\\\.\\\\-]+)[^\n]*\n,\n\n        \nhtml\n:\n \n/([\\\\w\\\\:\\\\.\\\\-]+)[^\n]*\n,\n\n        \ncfml\n:\n \n/([\\\\w\\\\:\\\\.\\\\-]+)[^\n]*\n\n    \n}\n\n\n\n\n\n\nSwap Brackets Plugin Settings\n\n\nSwappable brackets for a given language can be defined in \nbh_swapping.sublime-settings\n.  Swap rules are found under the key \nswapping\n where \nswapping\n is an array of language swap rules.\n\n\n    \nswapping\n:\n \n[\n\n        \n{\n\n            \nenabled\n:\n \ntrue\n,\n\n            \nlanguage_list\n:\n \n[\nC++\n,\n \nC\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nentries\n:\n \n[\n\n                \n{\nname\n:\n \nC/C++: #if\n,\n \nbrackets\n:\n \n[\n#if ${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #if, #else\n,\n \nbrackets\n:\n \n[\n#if${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #if, #elif\n,\n \nbrackets\n:\n \n[\n#if${BH_SEL}\n,\n \n#elif ${BH_TAB:/* CONDITION */}\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifdef\n,\n \nbrackets\n:\n \n[\n#ifdef${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifdef, #else\n,\n \nbrackets\n:\n \n[\n#ifdef${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifndef\n,\n \nbrackets\n:\n \n[\n#ifndef${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifndef, #else\n,\n \nbrackets\n:\n \n[\n#ifndef${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]}\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nEach language rule contains the following attributes:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nbool\n\n\nSpecifies if the rule is enabled.\n\n\n\n\n\n\nlanguage_list\n\n\n[string]\n\n\nAn array of languages.\n\n\n\n\n\n\nlanguage_filter\n\n\nstring\n\n\nA string that specifies if the \nlanguage_list\n is either a \nwhitelist\n or \nblacklist\n.\n\n\n\n\n\n\nentries\n\n\n[dict]\n\n\nAn array of dictionaries, where each dictionary describes a type of bracket that can be swapped to.\n\n\n\n\n\n\n\n\nThe \nentries\n key is used to define the related bracket swap rules for the given langauge.  Each entry represents a bracket you can swap to.\n\n\n\n\n\n\n\n\nEntry\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the entry as it will be seen in the command palette.\n\n\n\n\n\n\nbrackets\n\n\n[string]\n\n\nAn array consisting of a string that represents the opening bracket and a string that represents the closing bracket.\n\n\n\n\n\n\n\n\nWithin the \nbrackets\n key, you can specify the where the cursor(s) will appear by using \n${BH_SEL}\n  If you would like the selection to display text as a hint to what a user should enter in the selection, you can use \n${BH_SEL:optional text}\n.  You can also define tab stops that a user can tab through and enter text.  The tab stop syntax is \n${BH_TAB}\n.  You can also define optional text within a tab stop to give the user a hint of what should be entered at the tab stop using the following syntax: \n${BH_TAB:optional text}\n.\n\n\nWrap Brackets Plugin Settings\n\n\nWrapping brackets for a given language can be defined in \nbh_wrapping.sublime-settings\n.  Wrap rules are found under the key \nwrapping\n where \nwrapping\n is an array of language wrap rules.\n\n\n    \nwrapping\n:\n \n[\n\n        \n{\n\n            \nenabled\n:\n \ntrue\n,\n\n            \nlanguage_list\n:\n \n[\nPlain text\n],\n\n            \nlanguage_filter\n:\n \nblacklist\n,\n\n            \nentries\n:\n \n[\n\n                \n{\nname\n:\n \n{} Curly\n,\n \nbrackets\n:\n \n[\n{\n,\n \n}${BH_SEL}\n],\n \ninsert_style\n:\n \n[\ninline\n,\n \nblock\n,\n \nindent_block\n]}\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nEach language rule contains the following attributes:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nbool\n\n\nSpecifies if the rule is enabled.\n\n\n\n\n\n\nlanguage_list\n\n\n[string]\n\n\nAn array of languages.\n\n\n\n\n\n\nlanguage_filter\n\n\nstring\n\n\nA string that specifies if the \nlanguage_list\n is either a \nwhitelist\n or \nblacklist\n.\n\n\n\n\n\n\nentries\n\n\n[dict]\n\n\nAn array of dictionaries, where each dictionary describes a type of bracket that can be used to wrap the selection.\n\n\n\n\n\n\n\n\nThe \nentries\n key is used to define the related bracket warp rules for the given langauge.  Each entry represents a bracket you can wrap the selection with.\n\n\n\n\n\n\n\n\nEntry\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the entry as it will be seen in the command palette.\n\n\n\n\n\n\nbrackets\n\n\n[string]\n\n\nAn array consisting of a string that represents the opening bracket and a string that represents the closing bracket.\n\n\n\n\n\n\ninsert_style\n\n\n[string]\n\n\nAn array consisting of allowed insertion styles.  Allowed insertion styles are: \ninline\n, \nblock\n, and \nindent_block\n.  Default is \n[\ninline\n]\n.\n\n\n\n\n\n\n\n\nWithin the \nbrackets\n key, you can specify where the cursor(s) will appear by using \n${BH_SEL}\n  If you would like the selection to display text as a hint to what a user should enter in the selection, you can use \n${BH_SEL:optional text}\n. You can also define tab stops that a user can tab through and enter text.  The tab stop syntax is \n${BH_TAB}\n.  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax: \n${BH_TAB:optional text}\n.\n\n\nConfiguring Brackets\n\n\nBH\n has been written to allow users to define any brackets they would like to have highlighted.  Bracket rules are defined with case insensitive regular expressions, syntax scoping, and bh_plugins.  There are two kinds of brackets you can define: \nscope_brackets\n which search the file for scope regions and then use regex to test for opening and closing brackets, and \nbrackets\n which use regex to find opening and closing brackets.  \nbrackets\n type rules should usually be the preferred type.  \nscope_brackets\n are usually used for brackets whose opening and closing are the same and are not easily distinguishable from one another by regex; scope brackets must be contained in a continuous scope region like string for quotes etc.\n\n\nBH\n uses a wrapper around Python\ns re regex library to add support for additional back references.  See the \nExtended Regex Guide\n.\n\n\n\n\nTip\n\n\nBrackets can be modified, or even added, without copying the entire bracket rule list to the user settings.  See \nBracket Rule Management\n for more info.\n\n\n\n\nConfiguring Brackets Rules\n\n\nBrackets are defined under \nbrackets\n in \nbh_core.sublime-settings\n.\n\n\nangle\n and \ncurly\n brackets will be used as an example (not all options may be shown in these examples):\n\n\n        \n{\n\n            \nname\n:\n \nangle\n,\n\n            \nopen\n:\n \n(\n)\n,\n\n            \nclose\n:\n \n(\n)\n,\n\n            \nstyle\n:\n \nangle\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n,\n \nkeyword.operator\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nHTML\n,\n \nHTML 5\n,\n \nXML\n,\n \nPHP\n,\n \nHTML+CFML\n,\n \nColdFusion\n,\n \nColdFusionCFC\n],\n\n            \nplugin_library\n:\n \nbh_modules.tags\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \nname\n:\n \ncurly\n,\n\n            \nopen\n:\n \n(\\\\{)\n,\n\n            \nclose\n:\n \n(\\\\})\n,\n\n            \nstyle\n:\n \ncurly\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nscope_exclude_exceptions\n:\n \n[\nstring.other.math.block.environment.latex\n],\n\n            \nlanguage_filter\n:\n \nblacklist\n,\n\n            \nlanguage_list\n:\n \n[\nPlain text\n],\n\n            \nfind_in_sub_search\n:\n \ntrue\n,\n\n            \nignore_string_escape\n:\n \ntrue\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket (should be unique)\n\n\n\n\n\n\nopen\n\n\nDefines the opening bracket (one and only one capturing group must be present)\n\n\n\n\n\n\nclose\n\n\nDefines the closing bracket (one and only one capturing group must be present)\n\n\n\n\n\n\nstyle\n\n\nName of style definition to be used to highlight the brackets.  See \nConfiguring Bracket Styles\n for more info.\n\n\n\n\n\n\nscope_exclude\n\n\nScopes where the opening and closing brackets should be ignored.\n\n\n\n\n\n\nlanguage_filter\n\n\nThis works in conjunction with \nlanguage_list\n.  It specifies whether \nlanguage_list\n is a \nblacklist\n or \nwhitelist\n.\n\n\n\n\n\n\nlanguage_list\n\n\nAn array of tmLanguage file names that should be avoided or included for highlighting.  Looks to \nlanguage_filter\n to determine if avoidance or inclusion is used.\n\n\n\n\n\n\nenabled\n\n\nDisable or enable rule.\n\n\n\n\n\n\nscope_exclude_exceptions\n(optional)\n\n\nUsed to ignore excluding of sub scopes such as in the curly example above where \nstring\n is excluded, but not \nstring.other.math.block.environment.latex\n.\n\n\n\n\n\n\nplugin_library\n(optional)\n\n\nDefines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).\n\n\n\n\n\n\nfind_in_sub_search\n(optional)\n\n\nThis rule should be included when doing sub bracket matching in \nscope_brackets\n (like finding round brackets between quotes etc.).  The setting must be a string and can be either \ntrue\n, \nfalse\n, or \nonly\n; \nonly\n means this bracket is only matched as a sub bracket of a \nscope_bracket\n.\n\n\n\n\n\n\nignore_string_escape\n(optional)\n\n\nDo not ignore sub brackets found in strings and regex when escaped, but use internal escape logic to determine if the brackets should be ignored based on whether regex or string escape mode is set.\n\n\n\n\n\n\n\n\nConfiguring Scope Brackets Rules\n\n\nScope Brackets are defined under \nscope_brackets\n in \nbh_core.sublime-settings\n.\n\n\npy_single_quote\n bracket will be used as an example (not all options are shown in this example):\n\n\n        \n{\n\n            \nname\n:\n \npy_single_quote\n,\n\n            \nopen\n:\n \nu?r?((?:\n)?\n)\n,\n\n            \nclose\n:\n \n((?:\n)?\n)\n,\n\n            \nstyle\n:\n \nsingle_quote\n,\n\n            \nscopes\n:\n \n[\nstring\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nPython\n],\n\n            \nsub_bracket_search\n:\n \ntrue\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket (should be unique).\n\n\n\n\n\n\nopen\n\n\nDefines the opening bracket (one and only one capturing group must be present).\n\n\n\n\n\n\nclose\n\n\nDefines the closing bracket (one and only one capturing group must be present).\n\n\n\n\n\n\nstyle\n\n\nName of style definition to be used to highlight the brackets.  See \nConfiguring Bracket Styles\n for more info.\n\n\n\n\n\n\nscopes\n\n\nScope that should be searched to find the opening and closing brackets.\n\n\n\n\n\n\nlanguage_filter\n\n\nThis works in conjunction with \nlanguage_list\n.  It specifies whether \nlanguage_list\n is a \nblacklist\n or \nwhitelist\n.\n\n\n\n\n\n\nlanguage_list\n\n\nAn array of tmLanguage file names that should be avoided or included for highlighting.  Looks to \nlanguage_filter\n to determine if avoidance or inclusion is used.\n\n\n\n\n\n\nsub_bracket_search\n\n\nShould this scope bracket also search for sub brackets (like curly brackets in strings etc.).\n\n\n\n\n\n\nenabled\n\n\nDisable or enable rule.\n\n\n\n\n\n\nplugin_library\n(optional)\n\n\nDefines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).\n\n\n\n\n\n\n\n\nBracket Rule Management\n\n\nIn the past, BracketHighlighter required a user to copy the entire bracket list to the user \nbh_core.sublime-settings\n file.  This was a cumbersome requirement that also punished a user because if they did this, they wouldn\nt automatically get updates to the rules as all the rules were now overridden by the user\ns settings file.\n\n\nBracketHighlighter now lets you add or modify existing rules without overriding the entire rule set, or even the entire target rule.  Let\ns say you have a custom language you want to have on your machine. Now, you can simply add it to one of the two settings arrays: \nuser_scope_brackets\n and \nuser_brackets\n:\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nmylang\n,\n\n            \nopen\n:\n \n^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b\n,\n\n            \nclose\n:\n \n\\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b\n,\n\n            \nstyle\n:\n \ndefault\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nplugin_library\n:\n \nUser.bh_modules.mylangkeywords\n,\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nmylang\n],\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nLet\ns say you want to modify an existing rule, maybe just tweak the language list, all you have to do is use the same name and the item you want to change. Only that attribute will be overridden:\n\n\n    \nuser_brackets\n:\n \n[\n\n        \n// Angle\n\n        \n{\n\n            \nname\n:\n \nangle\n,\n\n            \nlanguage_list\n:\n \n[\n\n                \nHTML\n,\n \nHTML 5\n,\n \nXML\n,\n \nPHP\n,\n \nHTML (Rails)\n,\n\n                \nHTML (Jinja Templates)\n,\n \nHTML (Twig)\n,\n \nHTML+CFML\n,\n\n                \nColdFusion\n,\n \nColdFusionCFC\n,\n \nlaravel-blade\n,\n\n                \nHandlebars\n,\n \nAngularJS\n,\n\n                \nSomeNewLanguage\n \n// \n--- New language\n\n            \n]\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nLet\ns say you want to insert a new rule between two rules. You can turn on debug mode and call the \nBracketHighlighter: (Debug) Filter Rules by Key\n then select position to see the current rule order and their position index.  To turn on Debug mode, just add \ndebug_enable\n: true\n to your user settings file.\n\n\nExample of \nBracketHighlighter: (Debug) Filter Rules by Key\n output:\n\n\n[\n\n    \n[\n\n        \n{\nname\n:\n \ncurly\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \nround\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsquare\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \nhtml\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \ncfml\n,\n \nposition\n:\n \n4\n},\n\n        \n{\nname\n:\n \nphp_angle\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nangle\n,\n \nposition\n:\n \n6\n},\n\n        \n{\nname\n:\n \ncssedit_groups\n,\n \nposition\n:\n \n7\n},\n\n        \n{\nname\n:\n \nruby_embedded_html\n,\n \nposition\n:\n \n8\n},\n\n        \n{\nname\n:\n \nruby\n,\n \nposition\n:\n \n9\n},\n\n        \n{\nname\n:\n \nc_compile_switch\n,\n \nposition\n:\n \n10\n},\n\n        \n{\nname\n:\n \nphp_keywords\n,\n \nposition\n:\n \n11\n},\n\n        \n{\nname\n:\n \nerlang\n,\n \nposition\n:\n \n12\n},\n\n        \n{\nname\n:\n \nbash\n,\n \nposition\n:\n \n13\n},\n\n        \n{\nname\n:\n \nfish\n,\n \nposition\n:\n \n14\n},\n\n        \n{\nname\n:\n \nmylang\n,\n \nposition\n:\n \n15\n}\n\n    \n],\n\n    \n[\n\n        \n{\nname\n:\n \npy_single_quote\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \npy_double_quote\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsingle_quote\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \ndouble_quote\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \njsregex\n,\n \nposition\n:\n \n4\n},\n\n        \n{\nname\n:\n \nperlregex\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nrubyregex\n,\n \nposition\n:\n \n6\n},\n\n        \n{\nname\n:\n \nmditalic\n,\n \nposition\n:\n \n7\n},\n\n        \n{\nname\n:\n \nmdbold\n,\n \nposition\n:\n \n8\n}\n\n    \n]\n\n\n]\n\n\n\n\n\n\nThen you can specify the position you want to insert at using the \nposition\n key:\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nmylang\n,\n\n            \nposition\n:\n \n4\n,\n \n// \n-- New position\n\n            \nopen\n:\n \n^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b\n,\n\n            \nclose\n:\n \n\\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b\n,\n\n            \nstyle\n:\n \ndefault\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nplugin_library\n:\n \nUser.bh_modules.mylangkeywords\n,\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nmylang\n],\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nAnd if you run the debug command again, you will see that the position has changed:\n\n\n        \n{\nname\n:\n \ncurly\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \nround\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsquare\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \nhtml\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \ntrex\n,\n \nposition\n:\n \n4\n},\n \n// \n-- New position\n\n        \n{\nname\n:\n \ncfml\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nphp_angle\n,\n \nposition\n:\n \n6\n},\n\n\n\n\n\n\nThis can be used to adjust the position of default rules from your user settings as seen in the overrides above.\n\n\nSo, unless you are forking \nBH\n to pull request a change to the default rules, you can now modify the rules in just these two settings without copying or touching the default rules. This will allow you to make changes, but still receive new updated rules.\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[],\n\n\n\n\n\n\nConfiguring Highlight Style\n\n\nEach bracket definition (described in \nConfiguring Scope Brackets\n and \nConfiguring Brackets\n) has a \nstyle\n setting that you can assign a specific style to.  The name of the style corresponds to a style definition.  Style definitions are defined under \nbracket_styles\n in \nbh_core.sublime-settings\n.\n\n\nThere are two special style definitions whose names are reserved: \ndefault\n and \nunmatched\n, but you can configure them.  All other custom style definitions follow the same pattern.  You can look at \ncurly\n below and compare to the special style definitions; the format is the same.  All custom styles follow this pattern.  See description below:\n\n\n        \n// \ndefault\n style defines attributes that\n\n        \n// will be used for any style that does not\n\n        \n// explicitly define that attribute.  So if\n\n        \n// a style does not define a color, it will\n\n        \n// use the color from the \ndefault\n style.\n\n        \ndefault\n:\n \n{\n\n            \nicon\n:\n \ndot\n,\n\n            \ncolor\n:\n \nbrackethighlighter.default\n,\n\n            \nstyle\n:\n \nunderline\n\n        \n},\n\n\n        \n// This particular style is used to highlight\n\n        \n// unmatched bracket pairs.  It is a special\n\n        \n// style.\n\n        \nunmatched\n:\n \n{\n\n            \nicon\n:\n \nquestion\n,\n\n            \n// \ncolor\n: \nbrackethighlighter.unmatched\n,\n\n            \nstyle\n:\n \noutline\n\n        \n},\n\n        \n// User defined region styles\n\n        \ncurly\n:\n \n{\n\n            \nicon\n:\n \ncurly_bracket\n\n            \n// \ncolor\n: \nbrackethighlighter.curly\n,\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \ntag\n:\n \n{\n\n            \nicon\n:\n \ntag\n,\n\n            \n// \nendpoints\n: true,\n\n            \n// \ncolor\n: \nbrackethighlighter.tag\n,\n\n            \nstyle\n:\n \noutline\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nIcon to show in gutter. Available options are: \nangle\n, \nround\n, \ncurly\n, \nsquare\n, \ntag\n, \nstar\n, \ndot\n, \nbookmark\n, \nquestion\n, \nquote\n, \ndouble_quote\n, \nsingle_quote\n, \nsingle_quote_offset\n, \ndouble_quote_offset\n, \nnone\n.\n\n\n\n\n\n\ncolor\n\n\nScope to define color.\n\n\n\n\n\n\nstyle\n\n\nHighlight style.  Available options are: \nsolid\n, \noutline\n, \nunderline\n, \nnone\n.  \nST3\n has additional styles: \nthin_underline\n, \nsquiggly\n, \nstippled\n.\n\n\n\n\n\n\nendpoint\n\n\nBoolean to highlight just the beginning and end of bracket. This is useful for things like tags where it may be distracting highlighting the entire tag.\n\n\n\n\n\n\n\n\nAs shown in the example above, if an option is omitted, it will use the setting in \ndefault\n.  So \ncurly\n, in this example, defines \nicon\n, but will use \ndefault\n for the \ncolor\n and \nstyle\n.\n\n\nTo customize the color for \ncurly\n you can create your own custom scope.\n\n\nAdd this to your color scheme:\n\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nBracket Curly\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nbrackethighlighter.curly\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#CC99CC\n/string\n\n            \n/dict\n\n        \n/dict\n\n\n\n\n\n\nAnd then use the scope:\n\n\n        \ncurly\n:\n \n{\n\n            \nicon\n:\n \ncurly_bracket\n\n            \ncolor\n:\n \nbrackethighlighter.curly\n,\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n\n\n\n\n\nMy personal configurations\n\n\nIf you are curious about my personal configuration, here it is. The color scheme I use is from my \nAprosopo theme\n.\n\n\n\n\nNote\n\n\nIf a scope is not defined, it won\nt change the color. For instance, below I assign the hash rule for C/C++ preprocessors conditionals to \nbrackethighlighter.c_define\n, but I don\nt have \nbrackethighlighter.c_define\n in my theme \ndict\n. So it will look like the default color for this theme, white.\n\n\n\n\nMy personal conf: bh_core.sublime-settings\n\n\n// Define region highlight styles\n\n\n{\n\n    \nbracket_styles\n:\n \n{\n\n        \n// \ndefault\n and \nunmatched\n styles are special\n\n        \n// styles. If they are not defined here,\n\n        \n// they will be generated internally with\n\n        \n// internal defaults.\n\n\n        \n// \ndefault\n style defines attributes that\n\n        \n// will be used for any style that does not\n\n        \n// explicitly define that attribute.  So if\n\n        \n// a style does not define a color, it will\n\n        \n// use the color from the \ndefault\n style.\n\n        \ndefault\n:\n \n{\n\n            \nicon\n:\n \ndot\n,\n\n            \n// BH1\ns original default color for reference\n\n            \n// \ncolor\n: \nentity.name.class\n,\n\n            \ncolor\n:\n \nbrackethighlighter.default\n,\n\n            \nstyle\n:\n \nunderline\n\n        \n},\n\n\n        \n// This particular style is used to highlight\n\n        \n// unmatched bracket pairs.  It is a special\n\n        \n// style.\n\n        \nunmatched\n:\n \n{\n\n            \nicon\n:\n \nquestion\n,\n\n            \ncolor\n:\n \nbrackethighlighter.unmatched\n,\n\n            \nstyle\n:\n \noutline\n\n        \n},\n\n        \n// User defined region styles\n\n        \ncurly\n:\n \n{\n\n            \nicon\n:\n \ncurly_bracket\n,\n\n            \ncolor\n:\n \nbrackethighlighter.curly\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nround\n:\n \n{\n\n            \nicon\n:\n \nround_bracket\n,\n\n            \ncolor\n:\n \nbrackethighlighter.round\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nsquare\n:\n \n{\n\n            \nicon\n:\n \nsquare_bracket\n,\n\n            \ncolor\n:\n \nbrackethighlighter.square\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nangle\n:\n \n{\n\n            \nicon\n:\n \nangle_bracket\n,\n\n            \ncolor\n:\n \nbrackethighlighter.angle\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \ntag\n:\n \n{\n\n            \nicon\n:\n \ntag\n,\n\n            \ncolor\n:\n \nbrackethighlighter.tag\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nc_define\n:\n \n{\n\n            \nicon\n:\n \nhash\n,\n\n            \ncolor\n:\n \nbrackethighlighter.c_define\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nsingle_quote\n:\n \n{\n\n            \nicon\n:\n \nsingle_quote\n,\n\n            \ncolor\n:\n \nbrackethighlighter.quote\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \ndouble_quote\n:\n \n{\n\n            \nicon\n:\n \ndouble_quote\n,\n\n            \ncolor\n:\n \nbrackethighlighter.quote\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \nregex\n:\n \n{\n\n            \nicon\n:\n \nstar\n,\n\n            \ncolor\n:\n \nbrackethighlighter.quote\n\n            \n// \nstyle\n: \nunderline\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMy personal conf: [Default Theme].tmTheme\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Tag\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.tag\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#66CCCC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Curly\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.curly\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#CC99CC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Round\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.round\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#FFCC66\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Square\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.square\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#6699CC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Angle\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.angle\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#F99157\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Quote\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.quote\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#99CC99\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Unmatched\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.unmatched\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#F2777A\n/string\n\n    \n/dict\n\n\n/dict\n\n\n\n\n\n\nBracket Plugin API\n\n\nThere are two kinds of plugins that can be written \ndefinition\n plugins (plugins attached to bracket definitions via the \nplugin_library\n option) or \nrun instance\n plugins (plugins that are that are fed directly into the BracketHighligher command via the command parameter \nplugin\n).\n\n\nBracket plugins use \nBracketRegions\n.\n\n\n\n\nclass BracketRegion(begin_pt, end_pt)\n\n\n\n\nBracketRegions\n are simple objects containing a begin pt and end pt of a bracket.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin_pt\n\n\nStarting point.\n\n\n\n\n\n\nend_pt\n\n\nEnding point.\n\n\n\n\n\n\n\n\nAttributes\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin\n\n\nThe start pt of the BracketRegion.\n\n\n\n\n\n\nend\n\n\nThe end pt of the BracketRegion.\n\n\n\n\n\n\n\n\nMethods\n:\n\n\n\n\ndef size(self)\n\n\nReturns size of region\n\n\ndef move(self, begin_pt, end_pt)\n\n\n\n\nReturns a new BracketRegion object with the points moved to the specified position.\n\n\nParmenters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin_pt\n\n\nStarting point.\n\n\n\n\n\n\nend_pt\n\n\nEnd Point.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nBracketRegion with new starting and ending points\n\n\n\n\n\n\n\n\n\n\ndef to_region(self)\n\n\n\n\nConverts BracketRegion to a SublimeRegion\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSublimeRegion\n\n\nA Sublime Region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf needed, bracket plugins can be imported into each other reuse functionality, but because they are not in Python\ns path, you need to use the special import method.\n\n\n\n\ndef import_module(module, attribute=None)\n\n\n\n\nImports a bh_plugin and returns the module or the module attribute if \nattribute\n is defined.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodule\n\n\nThe desired module to import. For internal plugins, they are referenced by \nbh_modules.\nplugin name\n.  For custom plugins, you should use the folder path relative to \nPackages\n.  So if I had a plugin called \nmyplugin.py\n in my \nUser\\bh_modules\n folder, I would use \nUser.bh_modules.myplugin\n.\n\n\n\n\n\n\nattribute\n\n\nThe attribute to import from the module.\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition\n Plugins\n\n\nThese are plugins that are attached to the bracket definition and aid in processing the brackets.  These kinds of plugins have three methods you can provide: \npost_match\n, \ncompare\n, and/or \nvalidate\n.\n\n\nvalidate\n\n\n\n\ndef validate(name, bracket, bracket_size, bfr)\n\n\n\n\nvalidate\n is run before comparing the bracket to its corresponding opening or closing partner.  This is used to perform additional validation on a found bracket.  For example, lets say you have a bracket that is case sensitive.  \nBH\n uses a case insensitive search, so with validate, you can ensure the originally found bracket matches the desired case.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nbracket\n\n\nThe bracket region being validated.\n\n\n\n\n\n\nbracket_side\n\n\nOpening (0) or closing (1) bracket.\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\nindicates whether the validation succeeded (True) or failed (False).\n\n\n\n\n\n\n\n\nExample: Should match closing tag \nend\n but not match \nEnd\n\n\ncase\n \nFoo\n \nof\n\n    \nGuard1\n \n-\n \nok\n;\n\n    \nGuard2\n \n-\n \nEnd\n\n\nend\n\n\n\n\n\n\nExample (from lowercase.py):\n\n\ndef\n \nvalidate\n(\nname\n,\n \nbracket\n,\n \nbracket_side\n,\n \nbfr\n):\n\n    \nCheck if bracket is lowercase.\n\n\n    \nreturn\n \nbfr\n[\nbracket\n.\nbegin\n:\nbracket\n.\nend\n]\n.\nislower\n()\n\n\n\n\n\n\n\n\n\n\ncompare\n\n\n\n\ndef compare(name, first, second, bfr)\n\n\n\n\ncompare\n is run when comparing the opening bracket with closing brackets.  This allows you to provide logic to accept or reject the pairing of an opening bracket with a closing bracket.  You should not change the text in the view during this operation.\n\n\nParamters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nfirst\n\n\nA bracket region for the opening bracket.\n\n\n\n\n\n\nsecond\n\n\nA bracket region for the closing bracket.\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\nIndicating whether the the comparison yields a suitable match.\n\n\n\n\n\n\n\n\nExample (from phphekywords.py):\n\n\ndef\n \ncompare\n(\nname\n,\n \nfirst\n,\n \nsecond\n,\n \nbfr\n):\n\n    \nreturn\n \nend\n \n+\n \nbfr\n[\nfirst\n.\nbegin\n:\nfirst\n.\nend\n]\n.\nlower\n()\n \n==\n \nbfr\n[\nsecond\n.\nbegin\n:\nsecond\n.\nend\n]\n.\nlower\n()\n\n\n\n\n\n\n\n\n\n\npost_match\n\n\n\n\ndef post_match(name, style, first, second, center, bfr, threshold)\n\n\n\n\npost_match\n is run after the brackets have been matched.  You can do things like alter the highlighting region and change the bracket_style if needed. You should not change the text in the view during this operation.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nstyle\n\n\nThe style definition name that is to be used to highlight the region.\n\n\n\n\n\n\nfirst\n\n\nA bracket region for the opening bracket.\n\n\n\n\n\n\nsecond\n\n\nA bracket region for the closing bracket.\n\n\n\n\n\n\ncenter\n\n\nPosition (pt) of cursor (in retrospect, probably not the most intuitive name; not sure why I named it this).\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\nthreshold\n\n\nThe calculated search window of the buffer that is being searched.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nOpening bracket region.\n\n\n\n\n\n\nBracketRegion\n\n\nClosing bracket region.\n\n\n\n\n\n\nstyle\n\n\nThe name of the style definition to use.\n\n\n\n\n\n\n\n\nExample (from rubykeywords.py):\n\n\nimport\n \nre\n\n\n\n\ndef\n \npost_match\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \nbfr\n,\n \nthreshold\n):\n\n    \nif\n \nfirst\n \nis\n \nnot\n \nNone\n:\n\n        \n# Strip whitespace from the beginning of first bracket\n\n        \nopen_bracket\n \n=\n \nbfr\n[\nfirst\n.\nbegin\n:\nfirst\n.\nend\n]\n\n        \nif\n \nopen_bracket\n \n!=\n \ndo\n:\n\n            \nm\n \n=\n \nre\n.\nmatch\n(\nr\n^(\\s*\\b)[\\w\\W]*\n,\n \nopen_bracket\n)\n\n            \nif\n \nm\n:\n\n                \nfirst\n \n=\n \nfirst\n.\nmove\n(\nfirst\n.\nbegin\n \n+\n \nm\n.\nend\n(\n1\n),\n \nfirst\n.\nend\n)\n\n    \nreturn\n \nfirst\n,\n \nsecond\n,\n \nstyle\n\n\n\n\n\n\nExample (snippet from tags.py)\n\n\ndef\n \npost_match\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \nbfr\n,\n \nthreshold\n):\n\n    \nleft\n,\n \nright\n \n=\n \nfirst\n,\n \nsecond\n\n    \nthreshold\n \n=\n \n[\n0\n,\n \nlen\n(\nbfr\n)]\n \nif\n \nthreshold\n \nis\n \nNone\n \nelse\n \nthreshold\n\n    \ntag_settings\n \n=\n \nsublime\n.\nload_settings\n(\nbh_core.sublime-settings\n)\n\n    \ntag_mode\n \n=\n \nget_tag_mode\n(\nview\n,\n \ntag_settings\n.\nget\n(\ntag_mode\n,\n \n{}))\n\n    \ntag_style\n \n=\n \ntag_settings\n.\nget\n(\ntag_style\n,\n \nangle\n)\n\n    \nbracket_style\n \n=\n \nstyle\n\n\n    \nif\n \nfirst\n \nis\n \nnot\n \nNone\n \nand\n \ntag_mode\n \nis\n \nnot\n \nNone\n:\n\n        \nmatcher\n \n=\n \nTagMatch\n(\nview\n,\n \nbfr\n,\n \nthreshold\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \ntag_mode\n)\n\n        \nleft\n,\n \nright\n \n=\n \nmatcher\n.\nmatch\n()\n\n        \nif\n \nnot\n \nmatcher\n.\nno_tag\n:\n\n            \nbracket_style\n \n=\n \ntag_style\n\n\n    \nreturn\n \nleft\n,\n \nright\n,\n \nbracket_style\n\n\n\n\n\n\n\n\n\n\nhighlighting\n\n\n\n\ndef highlighting(view, name, style, right)\n\n\n\n\nhighlighting\n is the last hook that gets run.  This is at a point when \nBH\n no longer cares about what the \nactual\n bracket region is, so it is safe to modify it for highlighting purposes.  The view really shouldn\nt be modified here.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nThe current view containing brackets.\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nstyle\n\n\nThe style definition name that is to be used to highlight the region.\n\n\n\n\n\n\nleft\n\n\nA bracket region for the opening bracket (could be \nNone\n).\n\n\n\n\n\n\nright\n\n\nA bracket region for the closing bracket (could be \nNone\n).\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nOpening bracket region.\n\n\n\n\n\n\nBracketRegion\n\n\nClosing bracket region.\n\n\n\n\n\n\n\n\nExample (snippet from tags.py)\n\n\ndef\n \nhighlighting\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nleft\n,\n \nright\n):\n\n    \n\n\n    Highlight only the tag name.\n\n\n    \n\n    \nif\n \nstyle\n \n==\n \ntag\n:\n\n        \ntag_name\n \n=\n \n[\\w\\:\\.\\-]+\n\n        \nif\n \nleft\n \nis\n \nnot\n \nNone\n:\n\n            \nregion\n \n=\n \nview\n.\nfind\n(\ntag_name\n,\n \nleft\n.\nbegin\n)\n\n            \nleft\n \n=\n \nleft\n.\nmove\n(\nregion\n.\nbegin\n(),\n \nregion\n.\nend\n())\n\n        \nif\n \nright\n \nis\n \nnot\n \nNone\n:\n\n            \nregion\n \n=\n \nview\n.\nfind\n(\ntag_name\n,\n \nright\n.\nbegin\n)\n\n            \nright\n \n=\n \nright\n.\nmove\n(\nregion\n.\nbegin\n(),\n \nregion\n.\nend\n())\n\n    \nreturn\n \nleft\n,\n \nright\n\n\n\n\n\n\n\n\n\n\nRun Instance\n Plugins\n\n\nRun instance\n plugins are manually invoked bracket matching with an attached plugin.\n\nThe plugin itself is executed after a match is made.  When defining a manually invoked \nBH\n command, either \nbh_key\n or \nbh_async_key\n should be used (key referring to key binding, but is also used for the menu and command palette).  It may be misleading as to what \nbh_async_key\n means, but it is mainly a workaround to launch \nBH\n keys from the command palette.  The command is kicked off asynchronously to ensure the palette closes before executing, but the \nBH\n command itself is still synchronous.\n\n\nExample of run instance plugin getting called:\n\n\n// Go to left bracket\n\n    \n{\n\n        \ncaption\n:\n \nBracketHighlighter: Jump to Left Bracket\n,\n\n        \ncommand\n:\n \nbh_key\n,\n\n        \nargs\n:\n\n        \n{\n\n            \nlines\n \n:\n \ntrue\n,\n\n            \nplugin\n:\n\n            \n{\n\n                \ntype\n:\n \n[\n__all__\n],\n\n                \ncommand\n:\n \nbh_modules.bracketselect\n,\n\n                \nargs\n:\n \n{\nselect\n:\n \nleft\n}\n\n            \n}\n\n        \n}\n\n    \n},\n\n\n\n\n\n\nThe \nargs\n parameter is a dictionary.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlines\n\n\nShow the number of lines between the matched brackets in the status bar.\n\n\n\n\n\n\nno_outside_adj\n\n\nThis is a parameter used to tell the plugin to ignore the \nbracket_outside_adjacent\n setting.  This is by default used for the \nbracketselect\n commands to ignore outside adjacent matching so it can do expanding selections or jump to parents brackets.  The default is \nfalse\n when not defined, but it can be set to \ntrue\n or \nnull\n in JSON (it would be \nNone\n if defined directly in Python code).  When \nnull\n, the value will be read from \nignore_outside_adjacent_in_plugin\n setting in the \nbh_core.sublime-settings\n file for convenient altering of the behavior.\n\n\n\n\n\n\nplugin\n\n\nConfiguration for the plugin to be used.\n\n\n\n\n\n\n\n\nThe \nplugin\n parameter is a dictionary that contains 3 arguments that define which plugin should get run, under which circumstance it is run, and with what parameters it is run with.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nAn array containing the bracket definition names that the plugin should be run on.  Use \n__all__\n for all bracket definitions.\n\n\n\n\n\n\ncommand\n\n\nThe plugin to run.  For internal plugins, they are referenced by \nbh_modules.\nplugin name\n.  For custom plugins, you should use the folder path relative to \nPackages\n.  So if I had a plugin called \nmyplugin.py\n in my \nUser\\bh_modules\n folder, I would use \nUser.bh_modules.myplugin\n.\n\n\n\n\n\n\nargs\n\n\nA dictionary containing the arguments to feed into the plugin.\n\n\n\n\n\n\n\n\nYou create \nrun instance\n plugins by deriving a class from the \nBracketPluginCommand\n class.  Then you provide a method called \nplugin\n that returns the class.\n\n\n\n\nclass BracketPluginCommand()\n\n\n\n\nAttributes\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nThe sublime view containing the bracket (don\nt change this).\n\n\n\n\n\n\nleft\n\n\nA bracket region for the opening bracket (can be changed).\n\n\n\n\n\n\nright\n\n\nA bracket region for the closing bracket (can be changed).\n\n\n\n\n\n\nselection\n\n\nAn array containing the selection that triggered the match (can be changed).\n\n\n\n\n\n\nrefresh_match\n\n\nA plugin can set this to true if the plugin has moved the cursor in such a way that the current highlighted match is no longer valid.  This will cause \nBH\n to setup another match when idle. An example of this is in the \nbracketselect\n bh_plugin; the cursor can be moved outside the matching brackets requiring a refresh to match the parent when the command is complete.\n\n\n\n\n\n\nnobracket\n\n\nThis was added mainly for sub-bracket matching (a bracket inside other brackets like round brackets in quotes/strings).  This is set to true if the plugin has caused both left and right brackets to be returned as \nNone\n and it is not desired to fall back and match the parent.\n\n\n\n\n\n\n\n\nMethods\n:\n\n\n\n\ndef run(edit, name, \nargs\n)\n\n\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nedit\n\n\nThe sublime edit object.\n\n\n\n\n\n\nname\n\n\nThe bracket definition being evaluated.\n\n\n\n\n\n\n\n\n\n\n\n\nExample (from foldbracket.py):\n\n\nimport\n \nBracketHighlighter.bh_plugin\n \nas\n \nbh_plugin\n\n\nimport\n \nsublime\n\n\n\n\nclass\n \nFoldBrackets\n(\nbh_plugin\n.\nBracketPluginCommand\n):\n\n    \ndef\n \nrun\n(\nself\n,\n \nedit\n,\n \nname\n):\n\n        \ncontent\n \n=\n \nsublime\n.\nRegion\n(\nself\n.\nleft\n.\nend\n,\n \nself\n.\nright\n.\nbegin\n)\n\n        \nnew_content\n \n=\n \n[\ncontent\n]\n\n        \nif\n \ncontent\n.\nsize\n()\n \n \n0\n:\n\n            \nif\n \nself\n.\nview\n.\nfold\n(\ncontent\n)\n \n==\n \nFalse\n:\n\n                \nnew_content\n \n=\n \nself\n.\nview\n.\nunfold\n(\ncontent\n)\n\n        \nself\n.\nselection\n \n=\n \nnew_content\n\n\n\n\ndef\n \nplugin\n():\n\n    \nreturn\n \nFoldBrackets", 
            "title": "Customizing"
        }, 
        {
            "location": "/customize/#customization", 
            "text": "Tweaking BracketHighlighter.", 
            "title": "Customization"
        }, 
        {
            "location": "/customize/#overview", 
            "text": "BH  is extremely flexible and can be customized and extended to fit a user s needs.  The first step to customizing the existing rules and settings is to create a  bh_core.sublime-settings  in your  User  folder.  This is where the bracket and style rules and settings live.  By changing these settings, you can add support for new languages, or change the look of highlighting, and much more.", 
            "title": "Overview"
        }, 
        {
            "location": "/customize/#core-settings", 
            "text": "Styles and colors will be discussed in greater depth in the  Configuring Highlight Style  section.  But there are a number of general setting you can adjust to change how things look or work.  These settings are found in  bh_core.sublime-settings .", 
            "title": "Core Settings"
        }, 
        {
            "location": "/customize/#visual-settings", 
            "text": "These are the settings related to the visual appearance of  BH .", 
            "title": "Visual Settings"
        }, 
        {
            "location": "/customize/#show_in_minimap", 
            "text": "Shows highlighted brackets in the minimap.  This will work with all highlight styles except  underline ;  thin_underline  has no issues.       // Show brackets in the minimap. \n     show_in_minimap :   false ,", 
            "title": "show_in_minimap"
        }, 
        {
            "location": "/customize/#show_unmatched", 
            "text": "Displays a special highlight for brackets that cannot be matched.       // When only either the left or right bracket can be found \n     // this defines if the unmatched bracket should be shown. \n     show_unmatched :   true ,", 
            "title": "show_unmatched"
        }, 
        {
            "location": "/customize/#show_unmatched_exceptions", 
            "text": "List of languages in which the  show_unmatched  option logic will be reversed.       // Do the opposite of  show_unmatched  for the languages listed below \n     show_unmatched_exceptions :   [],", 
            "title": "show_unmatched_exceptions"
        }, 
        {
            "location": "/customize/#content_highlight_bar", 
            "text": "An experimental setting which can enable the display of a vertical bar that extends from the line containing the opening bracket to the line with the closing bracket.  Takes a boolean  true  or  false .  When  align_content_highlight_bar  is set to  false , the bar will be shown on the first column regardless of indent level of the brackets.  When  align_content_highlight_bar  is set to  true , the bar will be aligned at the bracket indent level.       // Experimental: Creates a visible bar at the beginning of all lines between \n     // multiline bracket spans. \n     content_highlight_bar :   false ,", 
            "title": "content_highlight_bar"
        }, 
        {
            "location": "/customize/#show_in_widgets", 
            "text": "An experimental setting that enables bracket highlighting in widgets (panels etc.).  By default,  BH  does not highlight any brackets in plain text which is what the majority of the widget text boxes are.  Regex search boxes are not plain text and should get bracket highlighting.       // Experimental: Allow bracket highlighter to search in widgets. \n     // Most widgets use Plain Text which BH should ignore, \n     // But regex find views views are usually regular expression \n     // Which should be the only views to trigger BH. \n     search_in_widgets :   false ,   Output panels are widgets as well, but sometimes the widget flag gets removed from them (Sublime issue). So this flag may or may not affect the output panel depending on its state.  If you are a developer and wish to ensure an output panel that is created by your plugin does  not  have bracket highlighting, you can set the following setting to the view as  True :  bracket_highlighter.ignore .", 
            "title": "show_in_widgets"
        }, 
        {
            "location": "/customize/#align_content_highlight_bar", 
            "text": "Modifies the behavior of  content_highlight_bar  and draws the vertical content bar at the indentation level of the highlighted bracket, but there are some limitations:    The content bar cannot extend through an empty line unless the bar is on the first column.  This is a limitation of the Sublime API.  Empty lines will have cause a gap in the bar.    The content bar will not be shown on a line where non-whitespace characters cross the bar.         // Experimental: Align the content highlight bar at the bracket indent level \n     align_content_highlight_bar :   false ,", 
            "title": "align_content_highlight_bar"
        }, 
        {
            "location": "/customize/#high_visibility_enabled_by_default", 
            "text": "Enables high visibility mode by default.  High visibility mode highlights not only the bracket but the content between as well, but it is disabled by default and must be toggled on to be used.  This reverses the behavior and has it on by default. Takes a boolean  true  or  false .       // Enable high visibility by default when sublime starts up \n     high_visibility_enabled_by_default :   false ,", 
            "title": "high_visibility_enabled_by_default"
        }, 
        {
            "location": "/customize/#high_visibility_style", 
            "text": "Modifies the styling of high visibility mode.  The available options are  solid ,  outline ,  underline ,  thin_underline ,  squiggly , and  stippled .       // High visibility style and color for high visibility mode \n     high_visibility_style :   outline ,", 
            "title": "high_visibility_style"
        }, 
        {
            "location": "/customize/#high_visibility_color", 
            "text": "Modifies the high visibility color.  There are three types of settings you can use:    __default__  is a special reserved value which will use the color set in  bracket_styles .  See  Configuring Highlight Style  for more info.    __bracket__  is a special reserved value which will inherit the defined color of the highlighted bracket.    Any valid scope found in your color scheme.         // Color for high visibility mode \n     high_visibility_color :   __bracket__ ,", 
            "title": "high_visibility_color"
        }, 
        {
            "location": "/customize/#behavioral-settings", 
            "text": "These settings affect the matching behavior.", 
            "title": "Behavioral Settings"
        }, 
        {
            "location": "/customize/#match_only_adjacent", 
            "text": "Causes  BH  to only match and highlight brackets when the cursor is adjacent to a bracket.       // Match brackets only when the cursor is touching the inside of the bracket \n     match_only_adjacent :   false ,", 
            "title": "match_only_adjacent"
        }, 
        {
            "location": "/customize/#bracket_outside_adjacent", 
            "text": "Augments the matching behavior and will trigger matching when the cursor is adjacent to a cursor on the outside (not between the brackets).       // Outside adjacent bracket matching \n     bracket_outside_adjacent :   true ,", 
            "title": "bracket_outside_adjacent"
        }, 
        {
            "location": "/customize/#block_cursor_mode", 
            "text": "Experimental setting that modifies the bracket matching mode for block cursor.  The bracket matching mode is one that makes a little more sense to some people in regards to the visual representation of block cursors.  So if you are someone that uses block cursors and find that toggling  bracket_outside_adjacent  still doesn t quite match brackets how you would like, you can give this setting a try.  When this setting is enabled,  bracket_outside_adjacent  will be ignored.       // Experimental: Special matching mode for block cursor. \n     // Essentially, this provides a matching mode that makes a little more \n     // sense to some in regards to the visual representation of block cursors. \n     // This will ignore  bracket_outside_adjacent . \n     block_cursor_mode :   false ,", 
            "title": "block_cursor_mode"
        }, 
        {
            "location": "/customize/#ignore_outside_adjacent_in_plugin", 
            "text": "Ignores the  bracket_outside_adjacent  setting when running a plugin  if  the plugin sets  no_outside_adj  to  null  ( null  for JSON or  None  in Python).       // When  bracket_outside_adjacet  is set, and a plugin command explicitly sets \n     //  no_outside_adj   None  instead of  true  or the default  false , \n     // this value will be used. \n     ignore_outside_adjacent_in_plugin :   true ,", 
            "title": "ignore_outside_adjacent_in_plugin"
        }, 
        {
            "location": "/customize/#ignore_block_mode_in_plugin", 
            "text": "Experimental setting that ignores the  block_cursor_mode  setting when running a plugin  if  the plugin sets  no_block_mode  to  null  ( null  for JSON or  None  in Python).       // When  block_cursor_mode  is set, and a plugin command explicitly sets \n     //  no_block_mode  to  None  instead of  true  or the default  false , \n     // this value will be used. \n     ignore_block_mode_in_plugin :   true ,", 
            "title": "ignore_block_mode_in_plugin"
        }, 
        {
            "location": "/customize/#bracket_string_escape_mode", 
            "text": "Depending on the setting,  BH  will either match sub-brackets inside strings with traditional string escape logic, or will match sub-brackets in strings with regex escape logic.  Takes a string value of either  regex  or  string .       // Set mode for string escapes to ignore (regex|string) \n     bracket_string_escape_mode :   string ,", 
            "title": "bracket_string_escape_mode"
        }, 
        {
            "location": "/customize/#search_threshold", 
            "text": "Sets the search threshold.  The search threshold determines how many characters  BH  will search through to find matching brackets before giving up.  This setting only affects auto-matching and not on-demand calls from the command palette and menu. By default, this value is very conservative and can be increased.  Keep in mind that a very large values may impact performance.       // Character threshold to search \n     search_threshold :   5000 ,", 
            "title": "search_threshold"
        }, 
        {
            "location": "/customize/#ignore_threshold", 
            "text": "Causes  search_threshold s  limit to be ignored.  It is not advised to use this as very large files may cause a noticeable performance hit, but has been made available due to a number of requests.       // Ignore threshold \n     ignore_threshold :   false ,", 
            "title": "ignore_threshold"
        }, 
        {
            "location": "/customize/#auto_selection_threshold", 
            "text": "A numerical value which controls the maximum number of simultaneous auto-matched brackets that are allowed.  This setting will not be considered when running on-demand calls via the command palette or menu.       // Set max number of multi-select brackets that will be searched automatically \n     auto_selection_threshold   :   10 ,", 
            "title": "auto_selection_threshold"
        }, 
        {
            "location": "/customize/#kill_highlight_on_threshold", 
            "text": "Completely kills highlighting when  auto_selection_threshold .  When disabled,  BH  will just highlight up to the threshold limit.       // Enable this to completely kill highlighting if  auto_selection_threshold \n     // is exceeded.  Default is to highlight up to the  auto_selection_threshold . \n     kill_highlight_on_threshold :   true ,", 
            "title": "kill_highlight_on_threshold"
        }, 
        {
            "location": "/customize/#no_multi_select_icons", 
            "text": "Disables gutter icons when doing multiple selections.       // Disable gutter icons when doing multi-select \n     no_multi_select_icons :   false ,", 
            "title": "no_multi_select_icons"
        }, 
        {
            "location": "/customize/#popup-settings", 
            "text": "Settings related to the new popup hints when brackets are off the viewable screen.", 
            "title": "Popup Settings"
        }, 
        {
            "location": "/customize/#show_offscreen_bracket_popup", 
            "text": "Setting this will show a popup when the mouse hovers over a visible bracket and its matching pair is off screen.  The popup will show about 120 chars of context of every line shown.  Additionally, if the bracket off screen bracket is located on a separate line, it will show an additional line(s) of context before and after.  The context is shown in plain text, but the bracket will be emphasized by making the bracket bold and colorizing it with the your theme s keyword color.   Char context ,  line context , and  emphasis color  can all be configured in the settings file.    If a bracket was unmatched with the invalid highlight, you can mouse over it and will get the unmatched popup that explains the reasons why an unmatched bracket might occur.  It also offers the option to attempt matching without the threshold.        // Show hover popup \n     // This will show a hover popup when mousing over \n     // the visible bracket if the other \n     // highlighted matching bracket is off screen. \n     // It will show line text of the off screen bracket -/+ 128 chars \n     // from the bracket start and end points. \n     // A link will be available allowing the user to click and jump to \n     // the other bracket. \n     show_offscreen_bracket_popup :   false ,", 
            "title": "show_offscreen_bracket_popup"
        }, 
        {
            "location": "/customize/#popup_char_context", 
            "text": "This determines the amount of chars per line of context that are allowed in the popup that is generated by  show_offscreen_bracket_popup .  By default, this setting is set to  120 .  If you desire a different amount, you can specify it here.       // Adjust char per line context of bracket popup. \n     popup_char_context :   120 ,", 
            "title": "popup_char_context"
        }, 
        {
            "location": "/customize/#popup_line_context", 
            "text": "Setting that determines the amount of additional lines of context that are allowed in the popup that is generated by  show_offscreen_bracket_popup .   popup_line_context  is only applied to brackets that are not on the same line as the visible bracket. This value is split and half the lines will be gathered from before the line of interest and half from after the line of interest.  It is recommend to use even numbers.  Line context is a bit dynamic in the sense that if x number of lines cannot be gathered from before, the additional lines will be applied after; the inverse is true in regards to lines after.       // Adjust number of lines of additional context \n     // that are shown when brackets are vertically off screen. \n     // Specified line count is split to context before and after the target line. \n     // So a value of 4 would give you two lines of context before and two lines after. \n     popup_line_context :   2 ,", 
            "title": "popup_line_context"
        }, 
        {
            "location": "/customize/#use_custom_popup_bracket_emphasis", 
            "text": "This experimental setting allows you to override the default popup bracket emphasis which is calculated based on what scope/color you have assigned to the matched bracket style.  With this setting enabled, you can use the setting  popup_bracket_emphasis  to control the color of the popup bracket emphasis.  This will default to  true  if you don t have the mdpopups version which supports guessing the correct color.       // Use  popup_bracket_emphasis  to customize the popup s bracket emphasis color \n     use_custom_popup_bracket_emphasis :   false ,", 
            "title": "use_custom_popup_bracket_emphasis"
        }, 
        {
            "location": "/customize/#popup_bracket_emphasis", 
            "text": "This experimental setting dictates what color is used to emphasize the off screen bracket in the popup that is generated by  show_offscreen_bracket_popup .  Colors can either be specified by a standard  TextMate scopes  (the popup library being used is mdpopups, and it scans your theme for standard TextMate scopes and creates the necessary CSS for the popups), or you can specify a hex color in the form of  #rgb  or  #rrggbb .  Due to limitations in Sublime s HTML renderer, scopes that define background colors will most likely not show the background color.  The default setting is  #ff0000 .  Outside of the scopes generated by mdpoups, it is likely that your theme may have additionally included scopes.  Sublime seems to include these by default (but your mileage may vary):   error  deleted  success  inserted  warning  modified        // Experimental: Specify the scope (to get color) to emphasize the off screen bracket \n     // in popups.  Alternatively you can use a hex value in the form  #rgb  or  #rrggbb . \n     popup_bracket_emphasis :   keyword", 
            "title": "popup_bracket_emphasis"
        }, 
        {
            "location": "/customize/#special-settings", 
            "text": "", 
            "title": "Special Settings"
        }, 
        {
            "location": "/customize/#debug", 
            "text": "Turn on debug logging.  Set to  true  to enable or  false  to disable.       //Debug logging \n     debug_enable :   false ,", 
            "title": "debug"
        }, 
        {
            "location": "/customize/#upgrade_dependencies", 
            "text": "This sets whether  BH  will attempt to upgrade dependencies to the know latest on package upgrade.  If this is undesirable for any reason (development or you just don t like things upgrading without your explicit say so), then set this to  false .       // Try to ensure dependencies are up to date. \n     // If it is not desirable to have this done (like developing) on a specific dependency, \n     // or some other reason, set this to False. \n     upgrade_dependencies :   true ,", 
            "title": "upgrade_dependencies"
        }, 
        {
            "location": "/customize/#tag-plugin-settings", 
            "text": "Tag settings found in  bh_tag.sublime-settings .  All tag settings are dictionaries.  Each key is represents a tag mode such as:  html ,  xhtml ,  cfml , etc.  All of these are exposed so that even non-standard HTML syntax can be supported.   Attention!  More tag mode keys can be added, but they  must  be added to  every  setting with valid parameters.", 
            "title": "Tag Plugin Settings"
        }, 
        {
            "location": "/customize/#tag_mode", 
            "text": "A list that contains a dictionary of different modes.  Each mode tweaks the tag matching for the respective mode.  Each entry in the list consists of a dictionary with the keys  mode ,  syntax , and the optional  first_line .  mode  specifies the mode name.   syntax  is a list of languages that are allowed in that mode.  first_line  (which is optional) is a regular expression that is applied to the first line in the file as a condition for selecting that mode.  The  tag_mode  list is evaluated in order from top to bottom and selects the first entry that matches all the criteria.       // Determine which style of tag-matching to use in which syntax. \n     tag_mode :   [ \n         { mode :   xml ,   syntax :   [ XML ]}, \n         { \n             mode :   xhtml , \n             syntax :   [ \n                 HTML , \n                 HTML 5 , \n                 PHP , \n                 HTML (Jinja Templates) , \n                 HTML (Rails) , \n                 HTML (Twig) , \n                 HTML (Django) , \n                 laravel-blade , \n                 blade , \n                 Handlebars , \n                 AngularJS , \n                 Java Server Pages (JSP) \n             ], \n             first_line :   ^[ \\\\t]* \\\\?xml \n         }, \n         { \n             mode :   html , \n             syntax :   [ \n                 HTML , \n                 HTML 5 , \n                 PHP , \n                 HTML (Jinja Templates) , \n                 HTML (Rails) , \n                 HTML (Twig) , \n                 HTML (Django) , \n                 laravel-blade , \n                 blade , \n                 Handlebars , \n                 AngularJS , \n                 Java Server Pages (JSP) \n             ] \n         }, \n         { \n             mode :   cfml , \n             syntax :   [ HTML+CFML ,   ColdFusion ,   ColdFusionCFC ] \n         } \n     ],", 
            "title": "tag_mode"
        }, 
        {
            "location": "/customize/#tag_style", 
            "text": "Sets the highlight style for the tag plugin.  The string value should correspond to a style entry in  bracket_styles .  See  Configuring Highlight Style  for more info.       // Style to use for matched tags \n     tag_style :   { \n         xhtml :   tag , \n         html :   tag , \n         cfml :   tag \n     },", 
            "title": "tag_style"
        }, 
        {
            "location": "/customize/#tag_scope_exclude", 
            "text": "Excludes certain scopes from being evaluated when searching for tags.       // Scopes to exclude from tag searches. \n     tag_scope_exclude :   { \n         xhtml :   [ string ,   comment ], \n         html :   [ string ,   comment ], \n         cfml :   [ string ,   comment ] \n     },", 
            "title": "tag_scope_exclude"
        }, 
        {
            "location": "/customize/#optional_tag_patterns", 
            "text": "Specifies a regex pattern for names that will be evaluated as optional tags. Optional tags whose closing tag is optional. In the case of optional tags, you may only have an opening (with no self closing slash).  null  can be used to specify that there is no pattern for specified tag mode.       // Optional closing HTML tags. You can use  null  if it does not require a pattern. \n     optional_tag_patterns :   { \n         xml :   null , \n         xhtml :   null , \n         html :   colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr , \n         cfml :   cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr \n     },", 
            "title": "optional_tag_patterns"
        }, 
        {
            "location": "/customize/#void_tag_patterns", 
            "text": "Specifies a regex pattern for names that never have a closing tag.  Void or empty tags can optionally use the self closing slash:  tag / .  null  can be used to specify that there is no pattern for specified tag mode.       // Tags that never have a closing.  You can use  null  if it does not require a pattern. \n     void_tag_patterns :   { \n         xml :   null , \n         xhtml :   null , \n         html :   area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr , \n         cfml :   area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr \n     },", 
            "title": "void_tag_patterns"
        }, 
        {
            "location": "/customize/#self_closing_tag_patterns", 
            "text": "Specifies a regex pattern for tag names that can be represented in self closing form:  tag / .   null  can be used to specify that there is no pattern for specified tag mode.       // Self closing tags.  Single tags that are closed like this  tag / \n     self_closing_tag_patterns :   { \n         xml :   [\\\\w:\\\\.\\\\-]+ , \n         xhtml :   [\\\\w:\\\\.\\\\-]+ , \n         html :   null , \n         cfml :   cf.+ \n     },", 
            "title": "self_closing_tag_patterns"
        }, 
        {
            "location": "/customize/#tag_name", 
            "text": "Specifies the regex pattern for identifying the tag name for a given tag mode.  This is broken out as a separate pattern so that the  tagattrselect  bh_plugin needs access to the tag_name and tag attributes separate form the whole HTML tag regex.       // Regex for tag name. Do not use capturing groups. \n     tag_name : \n     { \n         xhtml :   [\\\\w:\\\\.\\\\-]+ , \n         html :   [\\\\w:\\\\.\\\\-]+ , \n         cfml :   [\\\\w:\\\\.\\\\-]+ \n     },", 
            "title": "tag_name"
        }, 
        {
            "location": "/customize/#attributes", 
            "text": "Specifies the regex pattern for identifying the tag attributes for a given tag mode.  This is broken out as a separate pattern so that the  tagattrselect  bh_plugin needs access to the tag_name and tag attributes separate from the whole HTML tag regex.       // HTML attributes.  Do not use capturing groups. \n     attributes : \n     { \n         xhtml :   [\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\ (?:\\\\.|[^\\ ])*\\ | (?:\\\\.|[^ ])* ))? , \n         html :   [\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\ [^\\ ]*\\ | [^ ]* |[^\\\\s\\ `= ]+))? , \n         cfml :   [\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\ [^\\ ]*\\ | [^ ]* |[^\\\\s\\ `= ]+))? \n     },", 
            "title": "attributes"
        }, 
        {
            "location": "/customize/#start_tag", 
            "text": "Specifies the starting/opening tag regex.  The pattern can accept the tag name and attribute portion of the pattern from the  tag_name  and  attributes  settings via the python string formatting variables  tag_name  and  attributes : see example below.   tag_name  and  attributes  are broken out as a separate patterns so that the  tagattrselect  bh_plugin can have access to the tag_name and tag attributes separate from the whole HTML tag regex.       // Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator  /  only. \n     // Attributes and tag names are inserted using python string formatting: \n     // the keyword  attributes  and `tag_name` are used. \n     start_tag :   { \n         xhtml :   (%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?) , \n         html :   (%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?) , \n         cfml :   (%(tag_name)s)(?:(?:\\\\s+%(attributes)s)*|(?:(? =cfif)|(? =cfelseif))[^ ]+)\\\\s*(/?) \n     },", 
            "title": "start_tag"
        }, 
        {
            "location": "/customize/#end_tag", 
            "text": "Specifies the ending/closing tag regex.       // Regex for end/closing tag.  Only use a capturing group for name. \n     end_tag :   { \n         xhtml :   /([\\\\w\\\\:\\\\.\\\\-]+)[^ ]* , \n         html :   /([\\\\w\\\\:\\\\.\\\\-]+)[^ ]* , \n         cfml :   /([\\\\w\\\\:\\\\.\\\\-]+)[^ ]* \n     }", 
            "title": "end_tag"
        }, 
        {
            "location": "/customize/#swap-brackets-plugin-settings", 
            "text": "Swappable brackets for a given language can be defined in  bh_swapping.sublime-settings .  Swap rules are found under the key  swapping  where  swapping  is an array of language swap rules.       swapping :   [ \n         { \n             enabled :   true , \n             language_list :   [ C++ ,   C ], \n             language_filter :   whitelist , \n             entries :   [ \n                 { name :   C/C++: #if ,   brackets :   [ #if ${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #if, #else ,   brackets :   [ #if${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #if, #elif ,   brackets :   [ #if${BH_SEL} ,   #elif ${BH_TAB:/* CONDITION */}\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #ifdef ,   brackets :   [ #ifdef${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #ifdef, #else ,   brackets :   [ #ifdef${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #ifndef ,   brackets :   [ #ifndef${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #ifndef, #else ,   brackets :   [ #ifndef${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]} \n             ] \n         } \n     ]   Each language rule contains the following attributes:     Attribute  Type  Description      enabled  bool  Specifies if the rule is enabled.    language_list  [string]  An array of languages.    language_filter  string  A string that specifies if the  language_list  is either a  whitelist  or  blacklist .    entries  [dict]  An array of dictionaries, where each dictionary describes a type of bracket that can be swapped to.     The  entries  key is used to define the related bracket swap rules for the given langauge.  Each entry represents a bracket you can swap to.     Entry  Type  Description      name  string  The name of the entry as it will be seen in the command palette.    brackets  [string]  An array consisting of a string that represents the opening bracket and a string that represents the closing bracket.     Within the  brackets  key, you can specify the where the cursor(s) will appear by using  ${BH_SEL}   If you would like the selection to display text as a hint to what a user should enter in the selection, you can use  ${BH_SEL:optional text} .  You can also define tab stops that a user can tab through and enter text.  The tab stop syntax is  ${BH_TAB} .  You can also define optional text within a tab stop to give the user a hint of what should be entered at the tab stop using the following syntax:  ${BH_TAB:optional text} .", 
            "title": "Swap Brackets Plugin Settings"
        }, 
        {
            "location": "/customize/#wrap-brackets-plugin-settings", 
            "text": "Wrapping brackets for a given language can be defined in  bh_wrapping.sublime-settings .  Wrap rules are found under the key  wrapping  where  wrapping  is an array of language wrap rules.       wrapping :   [ \n         { \n             enabled :   true , \n             language_list :   [ Plain text ], \n             language_filter :   blacklist , \n             entries :   [ \n                 { name :   {} Curly ,   brackets :   [ { ,   }${BH_SEL} ],   insert_style :   [ inline ,   block ,   indent_block ]} \n             ] \n         } \n     ]   Each language rule contains the following attributes:     Attribute  Type  Description      enabled  bool  Specifies if the rule is enabled.    language_list  [string]  An array of languages.    language_filter  string  A string that specifies if the  language_list  is either a  whitelist  or  blacklist .    entries  [dict]  An array of dictionaries, where each dictionary describes a type of bracket that can be used to wrap the selection.     The  entries  key is used to define the related bracket warp rules for the given langauge.  Each entry represents a bracket you can wrap the selection with.     Entry  Type  Description      name  string  The name of the entry as it will be seen in the command palette.    brackets  [string]  An array consisting of a string that represents the opening bracket and a string that represents the closing bracket.    insert_style  [string]  An array consisting of allowed insertion styles.  Allowed insertion styles are:  inline ,  block , and  indent_block .  Default is  [ inline ] .     Within the  brackets  key, you can specify where the cursor(s) will appear by using  ${BH_SEL}   If you would like the selection to display text as a hint to what a user should enter in the selection, you can use  ${BH_SEL:optional text} . You can also define tab stops that a user can tab through and enter text.  The tab stop syntax is  ${BH_TAB} .  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax:  ${BH_TAB:optional text} .", 
            "title": "Wrap Brackets Plugin Settings"
        }, 
        {
            "location": "/customize/#configuring-brackets", 
            "text": "BH  has been written to allow users to define any brackets they would like to have highlighted.  Bracket rules are defined with case insensitive regular expressions, syntax scoping, and bh_plugins.  There are two kinds of brackets you can define:  scope_brackets  which search the file for scope regions and then use regex to test for opening and closing brackets, and  brackets  which use regex to find opening and closing brackets.   brackets  type rules should usually be the preferred type.   scope_brackets  are usually used for brackets whose opening and closing are the same and are not easily distinguishable from one another by regex; scope brackets must be contained in a continuous scope region like string for quotes etc.  BH  uses a wrapper around Python s re regex library to add support for additional back references.  See the  Extended Regex Guide .   Tip  Brackets can be modified, or even added, without copying the entire bracket rule list to the user settings.  See  Bracket Rule Management  for more info.", 
            "title": "Configuring Brackets"
        }, 
        {
            "location": "/customize/#configuring-brackets-rules", 
            "text": "Brackets are defined under  brackets  in  bh_core.sublime-settings .  angle  and  curly  brackets will be used as an example (not all options may be shown in these examples):           { \n             name :   angle , \n             open :   ( ) , \n             close :   ( ) , \n             style :   angle , \n             scope_exclude :   [ string ,   comment ,   keyword.operator ], \n             language_filter :   whitelist , \n             language_list :   [ HTML ,   HTML 5 ,   XML ,   PHP ,   HTML+CFML ,   ColdFusion ,   ColdFusionCFC ], \n             plugin_library :   bh_modules.tags , \n             enabled :   true \n         }, \n         { \n             name :   curly , \n             open :   (\\\\{) , \n             close :   (\\\\}) , \n             style :   curly , \n             scope_exclude :   [ string ,   comment ], \n             scope_exclude_exceptions :   [ string.other.math.block.environment.latex ], \n             language_filter :   blacklist , \n             language_list :   [ Plain text ], \n             find_in_sub_search :   true , \n             ignore_string_escape :   true , \n             enabled :   true \n         },      Parameter  Description      name  The name of the bracket (should be unique)    open  Defines the opening bracket (one and only one capturing group must be present)    close  Defines the closing bracket (one and only one capturing group must be present)    style  Name of style definition to be used to highlight the brackets.  See  Configuring Bracket Styles  for more info.    scope_exclude  Scopes where the opening and closing brackets should be ignored.    language_filter  This works in conjunction with  language_list .  It specifies whether  language_list  is a  blacklist  or  whitelist .    language_list  An array of tmLanguage file names that should be avoided or included for highlighting.  Looks to  language_filter  to determine if avoidance or inclusion is used.    enabled  Disable or enable rule.    scope_exclude_exceptions (optional)  Used to ignore excluding of sub scopes such as in the curly example above where  string  is excluded, but not  string.other.math.block.environment.latex .    plugin_library (optional)  Defines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).    find_in_sub_search (optional)  This rule should be included when doing sub bracket matching in  scope_brackets  (like finding round brackets between quotes etc.).  The setting must be a string and can be either  true ,  false , or  only ;  only  means this bracket is only matched as a sub bracket of a  scope_bracket .    ignore_string_escape (optional)  Do not ignore sub brackets found in strings and regex when escaped, but use internal escape logic to determine if the brackets should be ignored based on whether regex or string escape mode is set.", 
            "title": "Configuring Brackets Rules"
        }, 
        {
            "location": "/customize/#configuring-scope-brackets-rules", 
            "text": "Scope Brackets are defined under  scope_brackets  in  bh_core.sublime-settings .  py_single_quote  bracket will be used as an example (not all options are shown in this example):           { \n             name :   py_single_quote , \n             open :   u?r?((?: )? ) , \n             close :   ((?: )? ) , \n             style :   single_quote , \n             scopes :   [ string ], \n             language_filter :   whitelist , \n             language_list :   [ Python ], \n             sub_bracket_search :   true , \n             enabled :   true \n         },      Parameters  Description      name  The name of the bracket (should be unique).    open  Defines the opening bracket (one and only one capturing group must be present).    close  Defines the closing bracket (one and only one capturing group must be present).    style  Name of style definition to be used to highlight the brackets.  See  Configuring Bracket Styles  for more info.    scopes  Scope that should be searched to find the opening and closing brackets.    language_filter  This works in conjunction with  language_list .  It specifies whether  language_list  is a  blacklist  or  whitelist .    language_list  An array of tmLanguage file names that should be avoided or included for highlighting.  Looks to  language_filter  to determine if avoidance or inclusion is used.    sub_bracket_search  Should this scope bracket also search for sub brackets (like curly brackets in strings etc.).    enabled  Disable or enable rule.    plugin_library (optional)  Defines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).", 
            "title": "Configuring Scope Brackets Rules"
        }, 
        {
            "location": "/customize/#bracket-rule-management", 
            "text": "In the past, BracketHighlighter required a user to copy the entire bracket list to the user  bh_core.sublime-settings  file.  This was a cumbersome requirement that also punished a user because if they did this, they wouldn t automatically get updates to the rules as all the rules were now overridden by the user s settings file.  BracketHighlighter now lets you add or modify existing rules without overriding the entire rule set, or even the entire target rule.  Let s say you have a custom language you want to have on your machine. Now, you can simply add it to one of the two settings arrays:  user_scope_brackets  and  user_brackets :       user_scope_brackets :   [], \n     user_brackets :   [ \n         { \n             name :   mylang , \n             open :   ^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b , \n             close :   \\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b , \n             style :   default , \n             scope_exclude :   [ string ,   comment ], \n             plugin_library :   User.bh_modules.mylangkeywords , \n             language_filter :   whitelist , \n             language_list :   [ mylang ], \n             enabled :   true \n         } \n     ],   Let s say you want to modify an existing rule, maybe just tweak the language list, all you have to do is use the same name and the item you want to change. Only that attribute will be overridden:       user_brackets :   [ \n         // Angle \n         { \n             name :   angle , \n             language_list :   [ \n                 HTML ,   HTML 5 ,   XML ,   PHP ,   HTML (Rails) , \n                 HTML (Jinja Templates) ,   HTML (Twig) ,   HTML+CFML , \n                 ColdFusion ,   ColdFusionCFC ,   laravel-blade , \n                 Handlebars ,   AngularJS , \n                 SomeNewLanguage   //  --- New language \n             ] \n         } \n     ],   Let s say you want to insert a new rule between two rules. You can turn on debug mode and call the  BracketHighlighter: (Debug) Filter Rules by Key  then select position to see the current rule order and their position index.  To turn on Debug mode, just add  debug_enable : true  to your user settings file.  Example of  BracketHighlighter: (Debug) Filter Rules by Key  output:  [ \n     [ \n         { name :   curly ,   position :   0 }, \n         { name :   round ,   position :   1 }, \n         { name :   square ,   position :   2 }, \n         { name :   html ,   position :   3 }, \n         { name :   cfml ,   position :   4 }, \n         { name :   php_angle ,   position :   5 }, \n         { name :   angle ,   position :   6 }, \n         { name :   cssedit_groups ,   position :   7 }, \n         { name :   ruby_embedded_html ,   position :   8 }, \n         { name :   ruby ,   position :   9 }, \n         { name :   c_compile_switch ,   position :   10 }, \n         { name :   php_keywords ,   position :   11 }, \n         { name :   erlang ,   position :   12 }, \n         { name :   bash ,   position :   13 }, \n         { name :   fish ,   position :   14 }, \n         { name :   mylang ,   position :   15 } \n     ], \n     [ \n         { name :   py_single_quote ,   position :   0 }, \n         { name :   py_double_quote ,   position :   1 }, \n         { name :   single_quote ,   position :   2 }, \n         { name :   double_quote ,   position :   3 }, \n         { name :   jsregex ,   position :   4 }, \n         { name :   perlregex ,   position :   5 }, \n         { name :   rubyregex ,   position :   6 }, \n         { name :   mditalic ,   position :   7 }, \n         { name :   mdbold ,   position :   8 } \n     ]  ]   Then you can specify the position you want to insert at using the  position  key:       user_scope_brackets :   [], \n     user_brackets :   [ \n         { \n             name :   mylang , \n             position :   4 ,   //  -- New position \n             open :   ^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b , \n             close :   \\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b , \n             style :   default , \n             scope_exclude :   [ string ,   comment ], \n             plugin_library :   User.bh_modules.mylangkeywords , \n             language_filter :   whitelist , \n             language_list :   [ mylang ], \n             enabled :   true \n         } \n     ],   And if you run the debug command again, you will see that the position has changed:           { name :   curly ,   position :   0 }, \n         { name :   round ,   position :   1 }, \n         { name :   square ,   position :   2 }, \n         { name :   html ,   position :   3 }, \n         { name :   trex ,   position :   4 },   //  -- New position \n         { name :   cfml ,   position :   5 }, \n         { name :   php_angle ,   position :   6 },   This can be used to adjust the position of default rules from your user settings as seen in the overrides above.  So, unless you are forking  BH  to pull request a change to the default rules, you can now modify the rules in just these two settings without copying or touching the default rules. This will allow you to make changes, but still receive new updated rules.       user_scope_brackets :   [], \n     user_brackets :   [],", 
            "title": "Bracket Rule Management"
        }, 
        {
            "location": "/customize/#configuring-highlight-style", 
            "text": "Each bracket definition (described in  Configuring Scope Brackets  and  Configuring Brackets ) has a  style  setting that you can assign a specific style to.  The name of the style corresponds to a style definition.  Style definitions are defined under  bracket_styles  in  bh_core.sublime-settings .  There are two special style definitions whose names are reserved:  default  and  unmatched , but you can configure them.  All other custom style definitions follow the same pattern.  You can look at  curly  below and compare to the special style definitions; the format is the same.  All custom styles follow this pattern.  See description below:           //  default  style defines attributes that \n         // will be used for any style that does not \n         // explicitly define that attribute.  So if \n         // a style does not define a color, it will \n         // use the color from the  default  style. \n         default :   { \n             icon :   dot , \n             color :   brackethighlighter.default , \n             style :   underline \n         }, \n\n         // This particular style is used to highlight \n         // unmatched bracket pairs.  It is a special \n         // style. \n         unmatched :   { \n             icon :   question , \n             //  color :  brackethighlighter.unmatched , \n             style :   outline \n         }, \n         // User defined region styles \n         curly :   { \n             icon :   curly_bracket \n             //  color :  brackethighlighter.curly , \n             //  style :  underline \n         }, \n         tag :   { \n             icon :   tag , \n             //  endpoints : true, \n             //  color :  brackethighlighter.tag , \n             style :   outline \n         },      Parameter  Description      icon  Icon to show in gutter. Available options are:  angle ,  round ,  curly ,  square ,  tag ,  star ,  dot ,  bookmark ,  question ,  quote ,  double_quote ,  single_quote ,  single_quote_offset ,  double_quote_offset ,  none .    color  Scope to define color.    style  Highlight style.  Available options are:  solid ,  outline ,  underline ,  none .   ST3  has additional styles:  thin_underline ,  squiggly ,  stippled .    endpoint  Boolean to highlight just the beginning and end of bracket. This is useful for things like tags where it may be distracting highlighting the entire tag.     As shown in the example above, if an option is omitted, it will use the setting in  default .  So  curly , in this example, defines  icon , but will use  default  for the  color  and  style .  To customize the color for  curly  you can create your own custom scope.  Add this to your color scheme:           dict \n             key name /key \n             string Bracket Curly /string \n             key scope /key \n             string brackethighlighter.curly /string \n             key settings /key \n             dict \n                 key foreground /key \n                 string #CC99CC /string \n             /dict \n         /dict    And then use the scope:           curly :   { \n             icon :   curly_bracket \n             color :   brackethighlighter.curly , \n             //  style :  underline \n         },", 
            "title": "Configuring Highlight Style"
        }, 
        {
            "location": "/customize/#my-personal-configurations", 
            "text": "If you are curious about my personal configuration, here it is. The color scheme I use is from my  Aprosopo theme .   Note  If a scope is not defined, it won t change the color. For instance, below I assign the hash rule for C/C++ preprocessors conditionals to  brackethighlighter.c_define , but I don t have  brackethighlighter.c_define  in my theme  dict . So it will look like the default color for this theme, white.   My personal conf: bh_core.sublime-settings  // Define region highlight styles  { \n     bracket_styles :   { \n         //  default  and  unmatched  styles are special \n         // styles. If they are not defined here, \n         // they will be generated internally with \n         // internal defaults. \n\n         //  default  style defines attributes that \n         // will be used for any style that does not \n         // explicitly define that attribute.  So if \n         // a style does not define a color, it will \n         // use the color from the  default  style. \n         default :   { \n             icon :   dot , \n             // BH1 s original default color for reference \n             //  color :  entity.name.class , \n             color :   brackethighlighter.default , \n             style :   underline \n         }, \n\n         // This particular style is used to highlight \n         // unmatched bracket pairs.  It is a special \n         // style. \n         unmatched :   { \n             icon :   question , \n             color :   brackethighlighter.unmatched , \n             style :   outline \n         }, \n         // User defined region styles \n         curly :   { \n             icon :   curly_bracket , \n             color :   brackethighlighter.curly \n             //  style :  underline \n         }, \n         round :   { \n             icon :   round_bracket , \n             color :   brackethighlighter.round \n             //  style :  underline \n         }, \n         square :   { \n             icon :   square_bracket , \n             color :   brackethighlighter.square \n             //  style :  underline \n         }, \n         angle :   { \n             icon :   angle_bracket , \n             color :   brackethighlighter.angle \n             //  style :  underline \n         }, \n         tag :   { \n             icon :   tag , \n             color :   brackethighlighter.tag \n             //  style :  underline \n         }, \n         c_define :   { \n             icon :   hash , \n             color :   brackethighlighter.c_define \n             //  style :  underline \n         }, \n         single_quote :   { \n             icon :   single_quote , \n             color :   brackethighlighter.quote \n             //  style :  underline \n         }, \n         double_quote :   { \n             icon :   double_quote , \n             color :   brackethighlighter.quote \n             //  style :  underline \n         }, \n         regex :   { \n             icon :   star , \n             color :   brackethighlighter.quote \n             //  style :  underline \n         } \n     }  }   My personal conf: [Default Theme].tmTheme  dict \n     key name /key \n     string Bracket Tag /string \n     key scope /key \n     string brackethighlighter.tag /string \n     key settings /key \n     dict \n         key foreground /key \n         string #66CCCC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Curly /string \n     key scope /key \n     string brackethighlighter.curly /string \n     key settings /key \n     dict \n         key foreground /key \n         string #CC99CC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Round /string \n     key scope /key \n     string brackethighlighter.round /string \n     key settings /key \n     dict \n         key foreground /key \n         string #FFCC66 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Square /string \n     key scope /key \n     string brackethighlighter.square /string \n     key settings /key \n     dict \n         key foreground /key \n         string #6699CC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Angle /string \n     key scope /key \n     string brackethighlighter.angle /string \n     key settings /key \n     dict \n         key foreground /key \n         string #F99157 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Quote /string \n     key scope /key \n     string brackethighlighter.quote /string \n     key settings /key \n     dict \n         key foreground /key \n         string #99CC99 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Unmatched /string \n     key scope /key \n     string brackethighlighter.unmatched /string \n     key settings /key \n     dict \n         key foreground /key \n         string #F2777A /string \n     /dict  /dict", 
            "title": "My personal configurations"
        }, 
        {
            "location": "/customize/#bracket-plugin-api", 
            "text": "There are two kinds of plugins that can be written  definition  plugins (plugins attached to bracket definitions via the  plugin_library  option) or  run instance  plugins (plugins that are that are fed directly into the BracketHighligher command via the command parameter  plugin ).  Bracket plugins use  BracketRegions .   class BracketRegion(begin_pt, end_pt)   BracketRegions  are simple objects containing a begin pt and end pt of a bracket.  Parameters :     Parameter  Description      begin_pt  Starting point.    end_pt  Ending point.     Attributes :     Attribute  Description      begin  The start pt of the BracketRegion.    end  The end pt of the BracketRegion.     Methods :   def size(self)  Returns size of region  def move(self, begin_pt, end_pt)   Returns a new BracketRegion object with the points moved to the specified position.  Parmenters :     Parameter  Description      begin_pt  Starting point.    end_pt  End Point.     Returns :     Return  Description      BracketRegion  BracketRegion with new starting and ending points      def to_region(self)   Converts BracketRegion to a SublimeRegion  Returns :     Return  Description      SublimeRegion  A Sublime Region.         If needed, bracket plugins can be imported into each other reuse functionality, but because they are not in Python s path, you need to use the special import method.   def import_module(module, attribute=None)   Imports a bh_plugin and returns the module or the module attribute if  attribute  is defined.  Parameters :     Parameter  Description      module  The desired module to import. For internal plugins, they are referenced by  bh_modules. plugin name .  For custom plugins, you should use the folder path relative to  Packages .  So if I had a plugin called  myplugin.py  in my  User\\bh_modules  folder, I would use  User.bh_modules.myplugin .    attribute  The attribute to import from the module.", 
            "title": "Bracket Plugin API"
        }, 
        {
            "location": "/customize/#definition-plugins", 
            "text": "These are plugins that are attached to the bracket definition and aid in processing the brackets.  These kinds of plugins have three methods you can provide:  post_match ,  compare , and/or  validate .", 
            "title": "'Definition' Plugins"
        }, 
        {
            "location": "/customize/#validate", 
            "text": "def validate(name, bracket, bracket_size, bfr)   validate  is run before comparing the bracket to its corresponding opening or closing partner.  This is used to perform additional validation on a found bracket.  For example, lets say you have a bracket that is case sensitive.   BH  uses a case insensitive search, so with validate, you can ensure the originally found bracket matches the desired case.  Parameters :     Parameter  Description      name  The name of the bracket definition being evaluated.    bracket  The bracket region being validated.    bracket_side  Opening (0) or closing (1) bracket.    bfr  The file buffer.     Returns :     Return  Description      Boolean  indicates whether the validation succeeded (True) or failed (False).     Example: Should match closing tag  end  but not match  End  case   Foo   of \n     Guard1   -   ok ; \n     Guard2   -   End  end   Example (from lowercase.py):  def   validate ( name ,   bracket ,   bracket_side ,   bfr ): \n     Check if bracket is lowercase. \n\n     return   bfr [ bracket . begin : bracket . end ] . islower ()", 
            "title": "validate"
        }, 
        {
            "location": "/customize/#compare", 
            "text": "def compare(name, first, second, bfr)   compare  is run when comparing the opening bracket with closing brackets.  This allows you to provide logic to accept or reject the pairing of an opening bracket with a closing bracket.  You should not change the text in the view during this operation.  Paramters :     Parameter  Description      name  The name of the bracket definition being evaluated.    first  A bracket region for the opening bracket.    second  A bracket region for the closing bracket.    bfr  The file buffer.     Returns :     Return  Description      Boolean  Indicating whether the the comparison yields a suitable match.     Example (from phphekywords.py):  def   compare ( name ,   first ,   second ,   bfr ): \n     return   end   +   bfr [ first . begin : first . end ] . lower ()   ==   bfr [ second . begin : second . end ] . lower ()", 
            "title": "compare"
        }, 
        {
            "location": "/customize/#post_match", 
            "text": "def post_match(name, style, first, second, center, bfr, threshold)   post_match  is run after the brackets have been matched.  You can do things like alter the highlighting region and change the bracket_style if needed. You should not change the text in the view during this operation.  Parameters :     Parameter  Description      name  The name of the bracket definition being evaluated.    style  The style definition name that is to be used to highlight the region.    first  A bracket region for the opening bracket.    second  A bracket region for the closing bracket.    center  Position (pt) of cursor (in retrospect, probably not the most intuitive name; not sure why I named it this).    bfr  The file buffer.    threshold  The calculated search window of the buffer that is being searched.     Returns :     Return  Description      BracketRegion  Opening bracket region.    BracketRegion  Closing bracket region.    style  The name of the style definition to use.     Example (from rubykeywords.py):  import   re  def   post_match ( view ,   name ,   style ,   first ,   second ,   center ,   bfr ,   threshold ): \n     if   first   is   not   None : \n         # Strip whitespace from the beginning of first bracket \n         open_bracket   =   bfr [ first . begin : first . end ] \n         if   open_bracket   !=   do : \n             m   =   re . match ( r ^(\\s*\\b)[\\w\\W]* ,   open_bracket ) \n             if   m : \n                 first   =   first . move ( first . begin   +   m . end ( 1 ),   first . end ) \n     return   first ,   second ,   style    Example (snippet from tags.py)  def   post_match ( view ,   name ,   style ,   first ,   second ,   center ,   bfr ,   threshold ): \n     left ,   right   =   first ,   second \n     threshold   =   [ 0 ,   len ( bfr )]   if   threshold   is   None   else   threshold \n     tag_settings   =   sublime . load_settings ( bh_core.sublime-settings ) \n     tag_mode   =   get_tag_mode ( view ,   tag_settings . get ( tag_mode ,   {})) \n     tag_style   =   tag_settings . get ( tag_style ,   angle ) \n     bracket_style   =   style \n\n     if   first   is   not   None   and   tag_mode   is   not   None : \n         matcher   =   TagMatch ( view ,   bfr ,   threshold ,   first ,   second ,   center ,   tag_mode ) \n         left ,   right   =   matcher . match () \n         if   not   matcher . no_tag : \n             bracket_style   =   tag_style \n\n     return   left ,   right ,   bracket_style", 
            "title": "post_match"
        }, 
        {
            "location": "/customize/#highlighting", 
            "text": "def highlighting(view, name, style, right)   highlighting  is the last hook that gets run.  This is at a point when  BH  no longer cares about what the  actual  bracket region is, so it is safe to modify it for highlighting purposes.  The view really shouldn t be modified here.  Parameters :     Parameter  Description      view  The current view containing brackets.    name  The name of the bracket definition being evaluated.    style  The style definition name that is to be used to highlight the region.    left  A bracket region for the opening bracket (could be  None ).    right  A bracket region for the closing bracket (could be  None ).     Returns :     Return  Description      BracketRegion  Opening bracket region.    BracketRegion  Closing bracket region.     Example (snippet from tags.py)  def   highlighting ( view ,   name ,   style ,   left ,   right ): \n          Highlight only the tag name.       \n     if   style   ==   tag : \n         tag_name   =   [\\w\\:\\.\\-]+ \n         if   left   is   not   None : \n             region   =   view . find ( tag_name ,   left . begin ) \n             left   =   left . move ( region . begin (),   region . end ()) \n         if   right   is   not   None : \n             region   =   view . find ( tag_name ,   right . begin ) \n             right   =   right . move ( region . begin (),   region . end ()) \n     return   left ,   right", 
            "title": "highlighting"
        }, 
        {
            "location": "/customize/#run-instance-plugins", 
            "text": "Run instance  plugins are manually invoked bracket matching with an attached plugin. \nThe plugin itself is executed after a match is made.  When defining a manually invoked  BH  command, either  bh_key  or  bh_async_key  should be used (key referring to key binding, but is also used for the menu and command palette).  It may be misleading as to what  bh_async_key  means, but it is mainly a workaround to launch  BH  keys from the command palette.  The command is kicked off asynchronously to ensure the palette closes before executing, but the  BH  command itself is still synchronous.  Example of run instance plugin getting called:  // Go to left bracket \n     { \n         caption :   BracketHighlighter: Jump to Left Bracket , \n         command :   bh_key , \n         args : \n         { \n             lines   :   true , \n             plugin : \n             { \n                 type :   [ __all__ ], \n                 command :   bh_modules.bracketselect , \n                 args :   { select :   left } \n             } \n         } \n     },    The  args  parameter is a dictionary.     Parameter  Description      lines  Show the number of lines between the matched brackets in the status bar.    no_outside_adj  This is a parameter used to tell the plugin to ignore the  bracket_outside_adjacent  setting.  This is by default used for the  bracketselect  commands to ignore outside adjacent matching so it can do expanding selections or jump to parents brackets.  The default is  false  when not defined, but it can be set to  true  or  null  in JSON (it would be  None  if defined directly in Python code).  When  null , the value will be read from  ignore_outside_adjacent_in_plugin  setting in the  bh_core.sublime-settings  file for convenient altering of the behavior.    plugin  Configuration for the plugin to be used.     The  plugin  parameter is a dictionary that contains 3 arguments that define which plugin should get run, under which circumstance it is run, and with what parameters it is run with.     Parameter  Description      type  An array containing the bracket definition names that the plugin should be run on.  Use  __all__  for all bracket definitions.    command  The plugin to run.  For internal plugins, they are referenced by  bh_modules. plugin name .  For custom plugins, you should use the folder path relative to  Packages .  So if I had a plugin called  myplugin.py  in my  User\\bh_modules  folder, I would use  User.bh_modules.myplugin .    args  A dictionary containing the arguments to feed into the plugin.     You create  run instance  plugins by deriving a class from the  BracketPluginCommand  class.  Then you provide a method called  plugin  that returns the class.   class BracketPluginCommand()   Attributes :     Attribute  Description      view  The sublime view containing the bracket (don t change this).    left  A bracket region for the opening bracket (can be changed).    right  A bracket region for the closing bracket (can be changed).    selection  An array containing the selection that triggered the match (can be changed).    refresh_match  A plugin can set this to true if the plugin has moved the cursor in such a way that the current highlighted match is no longer valid.  This will cause  BH  to setup another match when idle. An example of this is in the  bracketselect  bh_plugin; the cursor can be moved outside the matching brackets requiring a refresh to match the parent when the command is complete.    nobracket  This was added mainly for sub-bracket matching (a bracket inside other brackets like round brackets in quotes/strings).  This is set to true if the plugin has caused both left and right brackets to be returned as  None  and it is not desired to fall back and match the parent.     Methods :   def run(edit, name,  args )   Parameters :     Parameter  Description      edit  The sublime edit object.    name  The bracket definition being evaluated.       Example (from foldbracket.py):  import   BracketHighlighter.bh_plugin   as   bh_plugin  import   sublime  class   FoldBrackets ( bh_plugin . BracketPluginCommand ): \n     def   run ( self ,   edit ,   name ): \n         content   =   sublime . Region ( self . left . end ,   self . right . begin ) \n         new_content   =   [ content ] \n         if   content . size ()     0 : \n             if   self . view . fold ( content )   ==   False : \n                 new_content   =   self . view . unfold ( content ) \n         self . selection   =   new_content  def   plugin (): \n     return   FoldBrackets", 
            "title": "'Run Instance' Plugins"
        }, 
        {
            "location": "/extended-regex/", 
            "text": "Extended Regex Guide\n\n\nAn introduction to backrefs.\n\n\nOverview\n\n\nBH uses Python\ns re regex engine, but it also adds some additional back references to aid in the creation of bracket patterns.  This is done with a custom wrapper called backrefs that was originally written for \nRegReplace\n.\n\n\nBackrefs was written to add various additional backrefs that are known to some regex engines, but not to Python\ns re.  Backrefs adds: \n\\p\n, \n\\P\n, \n\\u\n, \n\\U\n, \n\\l\n, \n\\L\n, \n\\Q\n or \n\\E\n (though \n\\u\n and \n\\U\n are replaced with \n\\c\n and \n\\C\n).\n\n\nYou can read more about backrefs\n features in the \nbackrefs documentation\n.\n\n\nGetting the Latest Backrefs\n\n\nIt is not always clear when Package Control updates dependencies.  So to force dependency updates, you can run Package Control\ns \nSatisfy Dependencies\n command which will update to the latest release.\n\n\nUsing Backrefs in BracketHighlighter Plugins\n\n\nYou can import backrefs into a \nbh_plugin\n:\n\n\nfrom\n \nbackrefs\n \nas\n \nbre\n\n\n\n\n\n\nBackrefs does provide a wrapper for all of re\ns normal functions such as \nmatch\n, \nsub\n, etc., but is recommended to pre-compile your search patterns \nand\n your replace patterns for the best performance; especially if you plan on reusing the same pattern multiple times.  As re does cache a certain amount of the non-compiled calls you will be spared from some of the performance hit, but backrefs does not cache the pre-processing of search and replace patterns.\n\n\nTo use pre-compiled functions, you compile the search pattern with \ncompile_search\n.  If you want to take advantage of replace backrefs, you need to compile the replace pattern as well.  Notice the compiled pattern is fed into the replace pattern; you can feed the replace compiler the string representation of the search pattern as well, but the compiled pattern will be faster and is the recommended way.\n\n\npattern\n \n=\n \nbre\n.\ncompile_search\n(\nr\nsomepattern\n,\n \nflags\n)\n\n\nreplace\n \n=\n \nbre\n.\ncompile_replace\n(\npattern\n,\n \nr\n\\1 some replace pattern\n)\n\n\n\n\n\n\nThen you can use the complied search pattern and replace\n\n\ntext\n \n=\n \npattern\n.\nsub\n(\nreplace\n,\n \nr\nsometext\n)\n\n\n\n\n\n\nor\n\n\nm\n \n=\n \npattern\n.\nmatch\n(\nr\nsometext\n)\n\n\nif\n \nm\n:\n\n    \ntext\n \n=\n \nreplace\n(\nm\n)\n  \n# similar to m.expand(template)\n\n\n\n\n\n\nTo use the non-compiled search/replace functions, you call them just them as you would in re; the names are the same.  Methods like \nsub\n and \nsubn\n will compile the replace pattern on the fly if given a string.\n\n\nfor\n \nm\n \nin\n \nbre\n.\nfinditer\n(\nr\nsomepattern\n,\n \nsome text\n,\n \nbre\n.\nUNICODE\n \n|\n \nbre\n.\nDOTALL\n):\n\n    \n# do something\n\n\n\n\n\n\nIf you want to replace without compiling, you can use the \nexpand\n method.\n\n\nm\n \n=\n \nbre\n.\nmatch\n(\nr\nsometext\n)\n\n\nif\n \nm\n:\n\n    \ntext\n \n=\n \nbre\n.\nexpand\n(\nm\n,\n \nr\nreplace pattern\n)", 
            "title": "Extended Regex Guide"
        }, 
        {
            "location": "/extended-regex/#extended-regex-guide", 
            "text": "An introduction to backrefs.", 
            "title": "Extended Regex Guide"
        }, 
        {
            "location": "/extended-regex/#overview", 
            "text": "BH uses Python s re regex engine, but it also adds some additional back references to aid in the creation of bracket patterns.  This is done with a custom wrapper called backrefs that was originally written for  RegReplace .  Backrefs was written to add various additional backrefs that are known to some regex engines, but not to Python s re.  Backrefs adds:  \\p ,  \\P ,  \\u ,  \\U ,  \\l ,  \\L ,  \\Q  or  \\E  (though  \\u  and  \\U  are replaced with  \\c  and  \\C ).  You can read more about backrefs  features in the  backrefs documentation .", 
            "title": "Overview"
        }, 
        {
            "location": "/extended-regex/#getting-the-latest-backrefs", 
            "text": "It is not always clear when Package Control updates dependencies.  So to force dependency updates, you can run Package Control s  Satisfy Dependencies  command which will update to the latest release.", 
            "title": "Getting the Latest Backrefs"
        }, 
        {
            "location": "/extended-regex/#using-backrefs-in-brackethighlighter-plugins", 
            "text": "You can import backrefs into a  bh_plugin :  from   backrefs   as   bre   Backrefs does provide a wrapper for all of re s normal functions such as  match ,  sub , etc., but is recommended to pre-compile your search patterns  and  your replace patterns for the best performance; especially if you plan on reusing the same pattern multiple times.  As re does cache a certain amount of the non-compiled calls you will be spared from some of the performance hit, but backrefs does not cache the pre-processing of search and replace patterns.  To use pre-compiled functions, you compile the search pattern with  compile_search .  If you want to take advantage of replace backrefs, you need to compile the replace pattern as well.  Notice the compiled pattern is fed into the replace pattern; you can feed the replace compiler the string representation of the search pattern as well, but the compiled pattern will be faster and is the recommended way.  pattern   =   bre . compile_search ( r somepattern ,   flags )  replace   =   bre . compile_replace ( pattern ,   r \\1 some replace pattern )   Then you can use the complied search pattern and replace  text   =   pattern . sub ( replace ,   r sometext )   or  m   =   pattern . match ( r sometext )  if   m : \n     text   =   replace ( m )    # similar to m.expand(template)   To use the non-compiled search/replace functions, you call them just them as you would in re; the names are the same.  Methods like  sub  and  subn  will compile the replace pattern on the fly if given a string.  for   m   in   bre . finditer ( r somepattern ,   some text ,   bre . UNICODE   |   bre . DOTALL ): \n     # do something   If you want to replace without compiling, you can use the  expand  method.  m   =   bre . match ( r sometext )  if   m : \n     text   =   bre . expand ( m ,   r replace pattern )", 
            "title": "Using Backrefs in BracketHighlighter Plugins"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\n\n\nBracket Rules are Supported by the Community\n\n\nThe most common requested enhancement for BracketHighlighter is for new rules to add support for {insert your favorite language here}.  I, like you, am proficient in very specific languages.  I probably don\nt use your favorite language or there would already be a support for it.  I don\nt have time to learn the nuances of your language.  For these reasons, support for new language brackets \nrequires\n pull requests from the community.\n\n\nThough I will not personally implement rules for your favorite language, I am more than willing to offer suggestions and guidance to help those who may struggle to create rules for their specific language of interest.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked \nInvalid\n and closed.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible.  The template will reiterate what is mentioned here as a reminder:\n\n\n\n\nProvide environment information by running \nPreferences-\nPackage Settings-\nBracketHighlighter-\nSupport Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.\n\n\nProvide links to 3\nrd\n party syntax highlighting package you are using if applicable.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following commands:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.    Bracket Rules are Supported by the Community  The most common requested enhancement for BracketHighlighter is for new rules to add support for {insert your favorite language here}.  I, like you, am proficient in very specific languages.  I probably don t use your favorite language or there would already be a support for it.  I don t have time to learn the nuances of your language.  For these reasons, support for new language brackets  requires  pull requests from the community.  Though I will not personally implement rules for your favorite language, I am more than willing to offer suggestions and guidance to help those who may struggle to create rules for their specific language of interest.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked  Invalid  and closed.    When creating an issue on the repository, please provide as much info as possible.  The template will reiterate what is mentioned here as a reminder:   Provide environment information by running  Preferences- Package Settings- BracketHighlighter- Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.  Provide links to 3 rd  party syntax highlighting package you are using if applicable.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8-docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install pep8-naming  Linting is performed with the following commands:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nReleased under the MIT license.\n\n\nCopyright \n 2013 - 2016 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Released under the MIT license.  Copyright   2013 - 2016 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}